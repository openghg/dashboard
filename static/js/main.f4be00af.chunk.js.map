{"version":3,"sources":["components/ControlPanel/ControlPanel.module.css","components/SliderMap/SliderMap.module.css","components/DataSelector/DataSelector.module.css","components/SelectionBlock/SelectionBlock.module.css","components/LineChart/LineChart.module.css","components/VisUnit/VisUnit.module.css","components/VisLayout/VisLayout.module.css","components/LineChart/LineChart.js","components/Summary/Summary.js","components/Overview/Overview.js","components/VisUnit/VisUnit.js","components/VisLayout/VisLayout.js","components/Checkbox/Checkbox.js","components/SelectionBlock/SelectionBlock.js","components/DataSelector/DataSelector.js","images/github.svg","components/ControlPanel/ControlPanel.js","components/GraphContainer/GraphContainer.js","components/SliderMap/SliderMap.js","Dashboard.js","reportWebVitals.js","index.js"],"names":["module","exports","LineChart","data","this","props","plotData","siteNumber","Object","entries","site","siteData","x_values","keys","map","d","Date","parseInt","y_values","values","name","String","toUpperCase","selectedColour","colours","trace","x","y","mode","line","width","color","push","layout","title","text","font","size","xanchor","yanchor","xaxis","xLabel","range","xRange","showgrid","linecolor","autotick","ticks","yaxis","yLabel","yRange","zeroline","height","margin","l","r","b","t","pad","data-testid","className","styles","container","React","Component","Summary","children","Overview","VisUnit","testid","unit","vis","VisLayout","visualisations","Array","isArray","child","key","concat","main","Checkbox","label","species","type","checked","onChange","style","marginLeft","SelectionBlock","siteDataKeys","siteName","checkboxes","speciesName","checkedStatus","checkbox","header","DataSelector","state","selected","cloneDeep","dataKeys","handleInputChange","bind","callSelector","clearSelection","event","target","value","attributes","oldSelected","setState","dataSelector","subdict","subkey","blocks","block","buttons","betterButton","onClick","ControlPanel","headerText","headerTag","mainHeader","footer","href","rel","src","GitHubLogo","alt","GraphContainer","contRef","createRef","node","current","parentNode","clientHeight","clientWidth","updateDimensions","window","addEventListener","removeEventListener","ref","cloneElement","SliderMap","sites","firstSiteData","dates","sort","currentDate","measurementValue","handleDateChange","layerRef","timestamp","markers","lat","long","longName","locationStr","measurement","colour","circleKey","nanoid","circle","CircleMarker","center","radius","fillOpacity","fillColor","stroke","Popup","marker","markerHeader","markerBody","toLocaleDateString","markerLocation","startDate","endDate","length","marks","UNIXDate","date","Slider","defaultValue","aria-labelledby","step","max","min","zoom","mapBox","MapContainer","centre","scrollWheelZoom","TileLayer","attribution","url","LayerGroup","createMarkerLayer","sliderBox","createSlider","Dashboard","error","isLoaded","sidePanel","apiData","londonGHGSites","processData","toggleSidePanel","randomData","processedData","gas_data","selectedKeys","obj","speciesData","subObj","hasOwnProperty","totalSites","tableau10","join","containerKey","nSites","selectedColours","slice","divID","getID","message","createGraphs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oHACAA,EAAOC,QAAU,CAAC,UAAY,gCAAgC,OAAS,6BAA6B,WAAa,iCAAiC,UAAY,gCAAgC,KAAO,2BAA2B,WAAa,iCAAiC,OAAS,+B,gBCAvRD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,OAAS,0BAA0B,UAAY,6BAA6B,OAAS,0BAA0B,aAAe,gCAAgC,WAAa,8BAA8B,eAAiB,oC,kBCArRD,EAAOC,QAAU,CAAC,UAAY,gCAAgC,OAAS,6BAA6B,QAAU,8BAA8B,aAAe,qC,sBCA3JD,EAAOC,QAAU,CAAC,UAAY,kCAAkC,OAAS,+BAA+B,WAAa,qC,40vDCArHD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,SAAS,0BAA0B,SAAS,4B,gBCAvGD,EAAOC,QAAU,CAAC,KAAO,wB,gBCAzBD,EAAOC,QAAU,CAAC,KAAO,0B,i/LCqFVC,E,4JAhFb,WAOE,IANA,IAAMC,EAAOC,KAAKC,MAAMF,KAGpBG,EAAW,GACXC,EAAa,EAEjB,MAA+BC,OAAOC,QAAQN,GAA9C,eAAqD,CAAC,IAAD,sBAAzCO,EAAyC,KAAnCC,EAAmC,KAG7CC,EADeJ,OAAOK,KAAKF,GACHG,KAAI,SAACC,GAAD,OAAO,IAAIC,KAAKC,SAASF,OAErDG,EAAWV,OAAOW,OAAOR,GAEzBS,EAAOC,OAAOX,GAAMY,cAEpBC,EAAiBnB,KAAKC,MAAMmB,QAAQjB,GAGpCkB,EAAQ,CACZC,EAAGd,EACHe,EAAGT,EACHU,KAAM,QACNC,KAAM,CACJC,MAAO,EACPC,MARWR,GAAkC,SAU/CH,KAAMA,GAGRd,EAAS0B,KAAKP,GACdlB,IAGF,IAAM0B,EAAS,CACbC,MAAO,CACLC,KAAM/B,KAAKC,MAAM6B,MAAQ9B,KAAKC,MAAM6B,MAAQ,KAC5CE,KAAM,CACJC,KAAM,IAERC,QAAS,SACTX,EAAG,IACHY,QAAS,OAEXC,MAAO,CACLN,MAAO9B,KAAKC,MAAMoC,OAClBC,MAAOtC,KAAKC,MAAMsC,OAASvC,KAAKC,MAAMsC,OAAS,KAC/CC,UAAU,EACVC,UAAW,QACXC,UAAU,EACVC,MAAO,WAETC,MAAO,CACLd,MAAO9B,KAAKC,MAAM4C,OAClBP,MAAOtC,KAAKC,MAAM6C,OAAS9C,KAAKC,MAAM6C,OAAS,KAC/CN,UAAU,EACVC,UAAW,QACXC,UAAU,EACVC,MAAO,UACPI,UAAU,GAEZrB,MAAO1B,KAAKC,MAAMyB,MAClBsB,OAAQhD,KAAKC,MAAM+C,OACnBC,OAAQ,CACNC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,IAAK,IAIT,OACE,qBAAKC,cAAa,WAAYC,UAAWC,IAAOC,UAAhD,SACE,cAAC,IAAD,CAAM3D,KAAMG,EAAU2B,OAAQA,U,GA3Ed8B,IAAMC,WCIfC,G,kKALb,WACE,OAAO,qBAAKL,UAAU,UAAf,SAA0BxD,KAAKC,MAAM6D,e,GAF1BH,IAAMC,YCwBbG,G,kKAvBb,WACE,OACE,sBAAKP,UAAU,WAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,uCACA,uBAFF,0BAKA,sBAAKA,UAAU,gBAAf,UACE,4CACA,uBAFF,aAKA,sBAAKA,UAAU,gBAAf,UACE,oCACA,uBAFF,sB,GAdeG,IAAMC,Y,iBCUdI,E,4JATb,WACE,OACE,qBAAKT,cAAavD,KAAKC,MAAMgE,OAAQT,UAAWC,IAAOS,KAAvD,SACGlE,KAAKC,MAAMkE,U,GAJER,IAAMC,W,iBCmBbQ,E,4JAhBb,WACE,IAAIC,EACJ,GAAIC,MAAMC,QAAQvE,KAAKC,MAAM6D,UAC3BO,EAAiBrE,KAAKC,MAAM6D,SAASpD,KAAI,SAAC8D,GACxC,IAAMC,EAAM,YAAYC,OAAOF,EAAMC,KACrC,OAAO,cAAC,EAAD,CAASR,OAAQQ,EAAeN,IAAKK,GAAVC,UAE/B,CACL,IAAMA,EAAM,YAAYC,OAAO1E,KAAKC,MAAM6D,SAASW,KACnDJ,EAAiB,cAAC,EAAD,CAASJ,OAAQQ,EAAeN,IAAKnE,KAAKC,MAAM6D,UAArBW,GAG9C,OAAO,qBAAKjB,UAAWC,IAAOkB,KAAvB,SAA8BN,Q,GAbjBV,IAAMC,W,yBCkBfgB,E,4JAnBb,WACE,OACE,kCACE,+BAAO5E,KAAKC,MAAM4E,QAClB,uBACE7D,KAAMhB,KAAKC,MAAMe,KACjBuC,cAAavD,KAAKC,MAAMe,KACxBV,KAAMN,KAAKC,MAAMK,KACjBwE,QAAS9E,KAAKC,MAAM6E,QACpBC,KAAK,WACLC,QAAShF,KAAKC,MAAM+E,QACpBC,SAAUjF,KAAKC,MAAMgF,SACrBC,MAAO,CAAEC,WAAY,kB,GAbRxB,IAAMC,WCsCdwB,E,4JAnCb,WAME,IAJA,IAAMC,EAAerF,KAAKC,MAAMoF,aAC1BC,EAAWtF,KAAKC,MAAMqF,SAExBC,EAAa,GACjB,MAAsBnF,OAAOK,KAAK4E,GAAlC,eAAiD,CAA5C,IAAMP,EAAO,KACVD,EAAK,UAAMS,EAAN,YAAkBR,GACvBU,EAAcvE,OAAO6D,GAAS5D,cAC9BuE,EAAgBJ,EAAaP,GAE7BY,EACJ,cAAC,EAAD,CACEb,MAAOW,EACPxE,KAAM6D,EACNvE,KAAMgF,EACNR,QAASA,EACTE,QAASS,EACTR,SAAUjF,KAAKC,MAAMgF,UAChBJ,GAITU,EAAW3D,KAAK8D,GAGlB,OACE,sBAAKlC,UAAWC,IAAOC,UAAvB,UACE,qBAAKF,UAAWC,IAAOkC,OAAvB,SAAgC3F,KAAKC,MAAMqF,WAC3C,qBAAK9B,UAAWC,IAAO8B,WAAvB,SAAoCA,W,GA9Bf5B,IAAMC,W,iBCkFpBgC,E,kDA/Eb,WAAY3F,GAAQ,IAAD,8BACjB,cAAMA,IAED4F,MAAQ,CAAEC,SAAUC,oBAAU,EAAK9F,MAAM+F,WAC9C,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBANL,E,qDASnB,SAAkBG,GAChB,IAAMC,EAASD,EAAMC,OACfC,EAAwB,aAAhBD,EAAOvB,KAAsBuB,EAAOtB,QAAUsB,EAAOC,MAE7DjG,EAAOgG,EAAOE,WAAP,KAA0BD,MACjCzB,EAAUwB,EAAOE,WAAP,QAA6BD,MAGvCE,EAAcV,oBAAU/F,KAAK6F,MAAMC,UAEzCW,EAAYnG,GAAMwE,GAAWyB,EAE7BvG,KAAK0G,SAAS,CAAEZ,SAAUW,M,0BAG5B,WACEzG,KAAKC,MAAM0G,aAAa3G,KAAK6F,MAAMC,Y,4BAGrC,WAIE,IAFA,IAAMA,EAAW9F,KAAK6F,MAAMC,SAE5B,MAA2B1F,OAAOC,QAAQyF,GAA1C,eACE,IADoD,IAAD,sBAA3CrB,EAA2C,KAAtCmC,EAAsC,KACnD,MAAqBxG,OAAOK,KAAKmG,GAAjC,eAA2C,CAAtC,IAAMC,EAAM,KACff,EAASrB,GAAKoC,IAAU,EAI5B7G,KAAKC,MAAM0G,aAAab,K,oBAK1B,WAIE,IAHA,IAAIgB,EAAS,GACPd,EAAWhG,KAAK6F,MAAMC,SAE5B,MAAmB1F,OAAOK,KAAKuF,GAA/B,eAA0C,CAArC,IAAM1F,EAAI,KACPgF,EAAWrE,OAAOX,GAAMY,cACxBmE,EAAeW,EAAS1F,GAExByG,EACJ,cAAC,EAAD,CACE1B,aAAcA,EACdC,SAAUA,EACVL,SAAUjF,KAAKiG,mBACVX,GAITwB,EAAOlF,KAAKmF,GAGd,OACE,sBAAKvD,UAAWC,IAAOC,UAAvB,UACE,qBAAKF,UAAWC,IAAOqD,OAAvB,SAAgCA,IAChC,sBAAKtD,UAAWC,IAAOuD,QAAvB,UACE,wBAAQxD,UAAWC,IAAOwD,aAAcC,QAASlH,KAAKmG,aAAtD,kBAGA,wBAAQ3C,UAAWC,IAAOwD,aAAcC,QAASlH,KAAKoG,eAAtD,6B,GAvEiBzC,IAAMC,W,iBCPlB,MAA0B,mCCsC1BuD,E,4JA9Bb,WACE,OACE,sBAAK3D,UAAWC,IAAOC,UAAvB,UACE,sBAAKF,UAAWC,IAAOkC,OAAvB,UACE,qBAAKnC,UAAWC,IAAO2D,WAAvB,uBACA,qBAAK5D,UAAWC,IAAO4D,UAAvB,+DAIF,sBAAK7D,UAAWC,IAAOkB,KAAvB,UACE,qBAAKnB,UAAWC,IAAO6D,WAAvB,mBACA,cAAC,EAAD,CACEtB,SAAUhG,KAAKC,MAAM+F,SACrBW,aAAc3G,KAAKC,MAAM0G,kBAG7B,qBAAKnD,UAAWC,IAAO8D,OAAvB,SACE,mBACEC,KAAK,uCACLC,IAAI,aACJnB,OAAO,SAHT,SAKE,qBAAKoB,IAAKC,EAAYC,IAAI,2B,GAvBXjE,IAAMC,WCiClBiE,E,kDArCb,WAAY5H,GAAQ,IAAD,8BACjB,cAAMA,IAED4F,MAAQ,CAAEnE,MAAO,IAAMsB,OAAQ,KACpC,EAAK8E,QAAUnE,IAAMoE,YAJJ,E,oDAOnB,WACE,IAAMC,EAAOhI,KAAK8H,QAAQG,QAC1B,GAAID,EAAM,CACR,IAAMhF,EAASgF,EAAKE,WAAWC,aACzBzG,EAAQsG,EAAKE,WAAWE,YAC9BpI,KAAK0G,SAAS,CAAE1D,OAAQA,EAAQtB,MAAOA,O,+BAI3C,WACE1B,KAAKqI,mBACLC,OAAOC,iBAAiB,SAAUvI,KAAKqI,iBAAiBnC,KAAKlG,S,kCAG/D,WACEsI,OAAOE,oBAAoB,SAAUxI,KAAKqI,iBAAiBnC,KAAKlG,S,oBAGlE,WACE,OACE,qBAAKyI,IAAKzI,KAAK8H,QAAf,SACGnE,IAAM+E,aAAa1I,KAAKC,MAAM6D,SAAU,CACvCd,OAAQhD,KAAK6F,MAAM7C,OACnBtB,MAAO1B,KAAK6F,MAAMnE,c,GA/BCiC,IAAMC,W,iEC6JpB+E,G,wDAhJb,WAAY1I,GAAQ,IAAD,sBAGjB,IAAMM,GAFN,cAAMN,IAEgBA,MAAM2I,MAEtBC,EAAgBtI,EADJH,OAAOK,KAAKF,GAAU,IAClB,aAChBuI,EAAQ1I,OAAOK,KAAKoI,GAAeE,OANxB,OAQjB,EAAKlD,MAAQ,CAAEmD,YAAanI,SAASiI,EAAM,IAAKG,iBAAkB,GAClE,EAAKC,iBAAmB,EAAKA,iBAAiBhD,KAAtB,gBACxB,EAAKiD,SAAWxF,IAAMoE,YAVL,E,oDAanB,SAAiB1B,EAAO+C,GACtBpJ,KAAK0G,SAAS,CAAEsC,YAAanI,SAASuI,O,+BAGxC,WAIE,IAHA,IAAMR,EAAQ5I,KAAKC,MAAM2I,MAErBS,EAAU,GACd,MAA+BjJ,OAAOC,QAAQuI,GAA9C,eAAsD,CAAC,IAAD,sBAA1CtI,EAA0C,KAApCC,EAAoC,KAC9C+E,EAAWrE,OAAOX,GAAMY,cACxBoI,EAAM/I,EAAQ,SACdgJ,EAAOhJ,EAAQ,UACfiJ,EAAWjJ,EAAQ,UACnBkJ,EAAW,UAAMnE,EAAN,aAAmBgE,EAAnB,aAA2BC,GAEtCG,EAAcnJ,EAAQ,aAAiBP,KAAK6F,MAAMmD,aAGpDW,EAAS,QACTD,EAAc,GAAKA,EAAc,GACnCC,EAAS,QACAD,EAAc,GACvBC,EAAS,SACAD,EAAc,MACvBC,EAAS,OAKX,IAAMC,EAAYC,cAEZC,EACJ,eAACC,EAAA,EAAD,CAEEC,OAAQ,CAACV,EAAKC,GACdU,OAAQ,GACRC,YAAa,GACbC,UAAWR,EACXS,QAAQ,EANV,UAQE,cAACC,EAAA,EAAD,UACE,sBAAK7G,UAAWC,IAAO6G,OAAvB,UACE,qBAAK9G,UAAWC,IAAO8G,aAAvB,SAAsCjF,IACtC,sBAAK9B,UAAWC,IAAO+G,WAAvB,mBACShB,EACP,uBAAM,uBACL,IAAI5I,KAAKZ,KAAK6F,MAAMmD,aAAayB,qBAHpC,IAG2D,IACxDf,KAEH,sBAAKlG,UAAWC,IAAOiH,eAAvB,uBACajB,UAlBnB,MACOG,GAyBTP,EAAQzH,KAAKkI,GAGf,OAAOT,I,0BAGT,WAcE,IAbA,IAAM9I,EAAWP,KAAKC,MAAM2I,MAGtBC,EAAgBtI,EADJH,OAAOK,KAAKF,GAAU,IAClB,aAChBuI,EAAQ1I,OAAOK,KAAKoI,GAAeE,OAEnC4B,EAAY9J,SAASiI,EAAM,IAC3B8B,EAAU/J,SAASiI,EAAMA,EAAM+B,OAAS,IAI1CC,EAAQ,GAEZ,MAA2B1K,OAAOC,QAAQwI,GAA1C,eAA0D,CAAC,IAAD,sBAA9CpE,EAA8C,KAClDsG,GADkD,KACvClK,SAAS4D,IACpBuG,EAAO,IAAIpK,KAAKmK,GAEtBD,EAAMlJ,KAAK,CAAE2E,MAAOwE,EAAUlG,MAAOmG,EAAKP,uBAe5C,OAXE,cAACQ,EAAA,EAAD,CACEC,aAAc,EACdjG,SAAUjF,KAAKkJ,iBACfiC,kBAAgB,oBAChBL,MAAOA,EACPM,KAAM,KACNC,IAAKT,EACLU,IAAKX,M,oBAOX,WACE,IAAMY,EAAOvL,KAAKC,MAAMsL,KAAOvL,KAAKC,MAAMsL,KAAO,EAI3CrG,EAAQ,CAAExD,MAHF1B,KAAKC,MAAMyB,MAAQ1B,KAAKC,MAAMyB,MAAQ,OAGtBsB,OAFfhD,KAAKC,MAAM+C,OAAShD,KAAKC,MAAM+C,OAAS,QAIvD,OACE,sBAAKQ,UAAWC,IAAOC,UAAvB,UACE,qBAAKF,UAAWC,IAAO+H,OAAvB,SACE,eAACC,EAAA,EAAD,CACEzB,OAAQhK,KAAKC,MAAMyL,OACnBH,KAAMA,EACNI,iBAAiB,EACjBzG,MAAOA,EAJT,UAME,cAAC0G,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,cAACC,EAAA,EAAD,CAAYtD,IAAKzI,KAAKmJ,SAAtB,SACGnJ,KAAKgM,2BAIZ,qBAAKxI,UAAWC,IAAOwI,UAAvB,SAAmCjM,KAAKkM,wB,GA3IxBvI,IAAMC,Y,oBCoNfuI,G,kDA3Mb,WAAYlM,GAAQ,IAAD,8BACjB,cAAMA,IAED4F,MAAQ,CACXuG,MAAO,KACPC,UAAU,EACVC,WAAW,EACXC,QAAS,IAIX,EAAK1G,MAAM+C,MAAQ4D,EAEnB,EAAK3G,MAAM0G,QAAU,EAAKE,cAE1B,EAAKC,gBAAkB,EAAKA,gBAAgBxG,KAArB,gBACvB,EAAKS,aAAe,EAAKA,aAAaT,KAAlB,gBACpB,EAAKuG,YAAc,EAAKA,YAAYvG,KAAjB,gBAjBF,E,+CAqBnB,WAQE,IANA,IAAMnG,EAAO4M,EAGT3G,EAAW,GACX4G,EAAgB,GAEpB,MAAmBxM,OAAOK,KAAKV,GAA/B,eAAsC,CAAjC,IAAMO,EAAI,KACb0F,EAAS1F,GAAQ,GACjBsM,EAActM,GAAQ,GAEtB,cAAsBF,OAAOK,KAAKV,EAAKO,IAAvC,eAA+C,CAA1C,IAAMwE,EAAO,KAChBkB,EAAS1F,GAAMwE,IAAW,EAE1B,IAAM+H,EAAW9M,EAAKO,GAAMwE,GAGtBtE,EADeJ,OAAOK,KAAKoM,GACHnM,KAAI,SAACC,GAAD,OAAO,IAAIC,KAAKC,SAASF,OAErDG,EAAWV,OAAOW,OAAO8L,GAG/BD,EAActM,GAAMwE,GAAW,CAC7BtE,SAAUA,EACVM,SAAUA,IAOhBd,KAAK6F,MAAM+G,cAAgBA,EAC3B5M,KAAK6F,MAAMG,SAAWA,I,0BAIxB,SAAaA,GACXhG,KAAK0G,SAAS,CAAEoG,aAAc9G,M,0BAGhC,WACE,IApEa+G,EAoET1I,EAAiB,GAEfyI,EAAe9M,KAAK6F,MAAMiH,aAE5BE,EAAc,GAElB,GAAIF,EAAc,CAChB,cAA6B1M,OAAOC,QAAQyM,GAA5C,eACE,IAD0D,IAAD,sBAA/CxM,EAA+C,KAAzC2M,EAAyC,KACzD,MAA+B7M,OAAOC,QAAQ4M,GAA9C,eAAuD,CAAC,IAAD,sBAA3CnI,EAA2C,KACrD,GADqD,KAC1C,CAET,IAAM/E,EAAO4M,EAAWrM,GAAMwE,GAEzBkI,EAAYE,eAAepI,KAC9BkI,EAAYlI,GAAW,IAGzBkI,EAAYlI,GAASxE,GAAQP,GAKnC,IAAIoN,EAAa,EAEXC,EAAYhM,EAAO,UAEzB,GA9FW2L,EA8FEC,EA7FkB,IAA5B5M,OAAOK,KAAKsM,GAAKlC,OA8FlB,cAAkCzK,OAAOC,QAAQ2M,GAAjD,eAA+D,CAAC,IAAD,sBAAnDlI,EAAmD,KAA1CvE,EAA0C,KAEvDuB,EAAQb,OAAO6D,GAAS5D,cACxBuD,EAAM3C,EAAM4C,OAAO,IAAKtE,OAAOK,KAAKF,GAAU8M,KAAK,MACnDC,EAAY,oBAAgB7I,GAE5B8I,EAASnN,OAAOK,KAAKF,GAAUsK,OAE/B2C,EAAkBJ,EAAUK,MAAMN,EAAYA,EAAaI,GAM3DpJ,EACJ,cAAC,EAAD,UACE,cAAC,EAAD,CACEuJ,MAAO1N,KAAK2N,QACZ5N,KAAMQ,EACNa,QAASoM,EACT1L,MAAOA,EACPO,OAAO,OACPQ,OAAO,iBACF4B,IARY6I,GAavBjJ,EAAezC,KAAKuC,GAEpBgJ,GAAcI,GAKpB,OAAOlJ,I,+BAGT,c,mBAqBA,WAEE,MAAO,UAAYwF,gB,6BAGrB,WACE7J,KAAK0G,SAAS,CAAE4F,WAAYtM,KAAK6F,MAAMyG,c,oBAGzC,WAAU,IAAD,EACmBtM,KAAK6F,MAAzBuG,EADC,EACDA,MADC,EACMC,SAMb,OAFW,EAEPD,EACK,0CAAaA,EAAMwB,WAKxB,sBAAKpK,UAAU,iBAAf,UACE,sBAAKA,UAAU,SAAf,UACE,qBAAK0D,QAASlH,KAAK0M,gBAAiBlJ,UAAU,WAA9C,SACE,0BAFJ,yBAMA,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,YAAf,SACE,cAAC,EAAD,CAAcwC,SAAUhG,KAAK6F,MAAMG,SAAUW,aAAc3G,KAAK2G,iBAElE,sBAAKnD,UAAU,aAAf,UACE,cAAC,EAAD,CAAWoF,MAAOrI,EAAUmL,OAAQ,CAAC,MAAO,OAASH,KAAM,GAAI7J,MAAO,OAAQsB,OAAQ,SACtF,cAAC,EAAD,UACE,2SAOF,cAAC,EAAD,IAEA,cAAC,EAAD,UAAYhD,KAAK6N,8B,GAnMPlK,IAAMC,WCVfkK,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.f4be00af.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ControlPanel_container__Z5LXb\",\"header\":\"ControlPanel_header__1QsP1\",\"headerText\":\"ControlPanel_headerText__1vciO\",\"headerTag\":\"ControlPanel_headerTag__2tt5R\",\"main\":\"ControlPanel_main__28E1L\",\"mainHeader\":\"ControlPanel_mainHeader__61ljS\",\"footer\":\"ControlPanel_footer__18lR5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SliderMap_container__2VjSi\",\"mapBox\":\"SliderMap_mapBox__O_dZn\",\"sliderBox\":\"SliderMap_sliderBox__2Ninr\",\"marker\":\"SliderMap_marker__YdM0E\",\"markerHeader\":\"SliderMap_markerHeader__1LrDT\",\"markerBody\":\"SliderMap_markerBody__3GXWW\",\"markerLocation\":\"SliderMap_markerLocation____0O7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DataSelector_container__1LlIx\",\"blocks\":\"DataSelector_blocks__2Gmnk\",\"buttons\":\"DataSelector_buttons__1wHlV\",\"betterButton\":\"DataSelector_betterButton__3tuu9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SelectionBlock_container__2wOup\",\"header\":\"SelectionBlock_header__xFx_4\",\"checkboxes\":\"SelectionBlock_checkboxes__Ipl0K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LineChart_container__1xvez\",\"x-axis\":\"LineChart_x-axis__1LjG1\",\"y-axis\":\"LineChart_y-axis__18kha\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"unit\":\"VisUnit_unit__3bFN-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"VisLayout_main__1T9_C\"};","import React from \"react\";\nimport Plot from \"react-plotly.js\";\n\nimport styles from \"./LineChart.module.css\";\n\nclass LineChart extends React.Component {\n  render() {\n    const data = this.props.data;\n\n    // Data keyed by site\n    let plotData = [];\n    let siteNumber = 0;\n\n    for (const [site, siteData] of Object.entries(data)) {\n      // We want to conver UNIX ms timestamps to Dates\n      const x_timestamps = Object.keys(siteData);\n      const x_values = x_timestamps.map((d) => new Date(parseInt(d)));\n      // Extract the count values\n      const y_values = Object.values(siteData);\n\n      const name = String(site).toUpperCase();\n\n      const selectedColour = this.props.colours[siteNumber];\n      const colour = selectedColour ? selectedColour : \"black\";\n\n      const trace = {\n        x: x_values,\n        y: y_values,\n        mode: \"lines\",\n        line: {\n          width: 1,\n          color: colour,\n        },\n        name: name,\n      };\n\n      plotData.push(trace);\n      siteNumber++;\n    }\n\n    const layout = {\n      title: {\n        text: this.props.title ? this.props.title : null,\n        font: {\n          size: 16,\n        },\n        xanchor: \"center\",\n        y: 0.97,\n        yanchor: \"top\",\n      },\n      xaxis: {\n        title: this.props.xLabel,\n        range: this.props.xRange ? this.props.xRange : null,\n        showgrid: false,\n        linecolor: \"black\",\n        autotick: true,\n        ticks: \"outside\",\n      },\n      yaxis: {\n        title: this.props.yLabel,\n        range: this.props.yRange ? this.props.yRange : null,\n        showgrid: false,\n        linecolor: \"black\",\n        autotick: true,\n        ticks: \"outside\",\n        zeroline: false,\n      },\n      width: this.props.width,\n      height: this.props.height,\n      margin: {\n        l: 60,\n        r: 40,\n        b: 30,\n        t: 20,\n        pad: 5,\n      },\n    };\n\n    return (\n      <div data-testid={\"linePlot\"} className={styles.container}>\n        <Plot data={plotData} layout={layout} />\n      </div>\n    );\n  }\n}\n\nexport default LineChart;\n","import React from \"react\";\nimport \"./Summary.css\";\n\nclass Summary extends React.Component {\n  render() {\n    return <div className=\"summary\">{this.props.children}</div>;\n  }\n}\n\nexport default Summary;\n","import React from \"react\";\nimport \"./Overview.css\";\n\nclass Overview extends React.Component {\n  render() {\n    return (\n      <div className=\"overview\">\n        <div className=\"overview-card\">\n          <b>London</b>\n          <br />\n          Temperature: 13°C\n        </div>\n        <div className=\"overview-card\">\n          <b>Air quality</b>\n          <br />\n          AQI: 55\n        </div>\n        <div className=\"overview-card\">\n          <b>CO2</b>\n          <br />\n          409.8 ppm\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Overview;\n","import React from \"react\";\nimport styles from \"./VisUnit.module.css\";\n\nclass VisUnit extends React.Component {\n  render() {\n    return (\n      <div data-testid={this.props.testid} className={styles.unit}>\n        {this.props.vis}\n      </div>\n    );\n  }\n}\n\nexport default VisUnit;\n","import React from \"react\";\nimport VisUnit from \"../VisUnit/VisUnit\";\n\nimport styles from \"./VisLayout.module.css\";\n\nclass VisLayout extends React.Component {\n  render() {\n    let visualisations;\n    if (Array.isArray(this.props.children)) {\n      visualisations = this.props.children.map((child) => {\n        const key = \"vis-unit-\".concat(child.key);\n        return <VisUnit testid={key} key={key} vis={child} />;\n      });\n    } else {\n      const key = \"vis-unit-\".concat(this.props.children.key);\n      visualisations = <VisUnit testid={key} key={key} vis={this.props.children} />;\n    }\n\n    return <div className={styles.main}>{visualisations}</div>;\n  }\n}\n\nexport default VisLayout;\n","import React from \"react\";\n// import \"./Checkbox.css\";\n\nclass Checkbox extends React.Component {\n  render() {\n    return (\n      <label>\n        <span>{this.props.label}</span>\n        <input\n          name={this.props.name}\n          data-testid={this.props.name}\n          site={this.props.site}\n          species={this.props.species}\n          type=\"checkbox\"\n          checked={this.props.checked}\n          onChange={this.props.onChange}\n          style={{ marginLeft: \"0.5vw\" }}\n        />\n      </label>\n    );\n  }\n}\n\nexport default Checkbox;\n","import React from \"react\";\nimport styles from \"./SelectionBlock.module.css\";\n\nimport Checkbox from \"../Checkbox/Checkbox\";\n\nclass SelectionBlock extends React.Component {\n  render() {\n    // This just has the data for this specific site\n    const siteDataKeys = this.props.siteDataKeys;\n    const siteName = this.props.siteName;\n\n    let checkboxes = [];\n    for (const species of Object.keys(siteDataKeys)) {\n      const label = `${siteName}_${species}`;\n      const speciesName = String(species).toUpperCase();\n      const checkedStatus = siteDataKeys[species];\n\n      const checkbox = (\n        <Checkbox\n          label={speciesName}\n          name={label}\n          site={siteName}\n          species={species}\n          checked={checkedStatus}\n          onChange={this.props.onChange}\n          key={label}\n        />\n      );\n\n      checkboxes.push(checkbox);\n    }\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.header}>{this.props.siteName}</div>\n        <div className={styles.checkboxes}>{checkboxes}</div>\n      </div>\n    );\n  }\n}\n\nexport default SelectionBlock;\n","import React from \"react\";\n// import styles from \"./ControlPanel.module.css\";\nimport { cloneDeep } from \"lodash\";\nimport SelectionBlock from \"../SelectionBlock/SelectionBlock\";\n\nimport styles from \"./DataSelector.module.css\";\n\nclass DataSelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { selected: cloneDeep(this.props.dataKeys) };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.callSelector = this.callSelector.bind(this);\n    this.clearSelection = this.clearSelection.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n\n    const site = target.attributes[\"site\"].value;\n    const species = target.attributes[\"species\"].value;\n\n    // Update the state to have the new\n    const oldSelected = cloneDeep(this.state.selected);\n\n    oldSelected[site][species] = value;\n\n    this.setState({ selected: oldSelected });\n  }\n\n  callSelector() {\n    this.props.dataSelector(this.state.selected);\n  }\n\n  clearSelection() {\n    // Clear all\n    const selected = this.state.selected;\n\n    for (let [key, subdict] of Object.entries(selected)) {\n      for (const subkey of Object.keys(subdict)) {\n        selected[key][subkey] = false;\n      }\n    }\n\n    this.props.dataSelector(selected);\n\n    // Also need to clear all checkboxes\n  }\n\n  render() {\n    let blocks = [];\n    const dataKeys = this.state.selected;\n\n    for (const site of Object.keys(dataKeys)) {\n      const siteName = String(site).toUpperCase();\n      const siteDataKeys = dataKeys[site];\n\n      const block = (\n        <SelectionBlock\n          siteDataKeys={siteDataKeys}\n          siteName={siteName}\n          onChange={this.handleInputChange}\n          key={siteName}\n        ></SelectionBlock>\n      );\n\n      blocks.push(block);\n    }\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.blocks}>{blocks}</div>\n        <div className={styles.buttons}>\n          <button className={styles.betterButton} onClick={this.callSelector}>\n            Plot\n          </button>\n          <button className={styles.betterButton} onClick={this.clearSelection}>\n            Clear\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DataSelector;\n","export default __webpack_public_path__ + \"static/media/github.16a9304e.svg\";","import React from \"react\";\n\nimport DataSelector from \"../DataSelector/DataSelector\";\nimport styles from \"./ControlPanel.module.css\";\n\nimport GitHubLogo from \"../../images/github.svg\";\n\nclass ControlPanel extends React.Component {\n  render() {\n    return (\n      <div className={styles.container}>\n        <div className={styles.header}>\n          <div className={styles.headerText}>LondonGHG</div>\n          <div className={styles.headerTag}>\n            A new system for estimating London's emissions\n          </div>\n        </div>\n        <div className={styles.main}>\n          <div className={styles.mainHeader}>Sites</div>\n          <DataSelector\n            dataKeys={this.props.dataKeys}\n            dataSelector={this.props.dataSelector}\n          />\n        </div>\n        <div className={styles.footer}>\n          <a\n            href=\"https://github.com/openghg/dashboard\"\n            rel=\"noreferrer\"\n            target=\"_blank\"\n          >\n            <img src={GitHubLogo} alt=\"GitHub logo\" />\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ControlPanel;\n","import React from \"react\";\n\nclass GraphContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    // Set the initial size of the plot\n    this.state = { width: 1000, height: 250 };\n    this.contRef = React.createRef();\n  }\n\n  updateDimensions() {\n    const node = this.contRef.current;\n    if (node) {\n      const height = node.parentNode.clientHeight;\n      const width = node.parentNode.clientWidth;\n      this.setState({ height: height, width: width });\n    }\n  }\n\n  componentDidMount() {\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  render() {\n    return (\n      <div ref={this.contRef}>\n        {React.cloneElement(this.props.children, {\n          height: this.state.height,\n          width: this.state.width,\n        })}\n      </div>\n    );\n  }\n}\n\nexport default GraphContainer;\n","import React from \"react\";\nimport {\n  LayerGroup,\n  MapContainer,\n  CircleMarker,\n  TileLayer,\n  Popup,\n} from \"react-leaflet\";\nimport { Slider } from \"@material-ui/core\";\nimport { nanoid } from \"nanoid\";\n\nimport styles from \"./SliderMap.module.css\";\nimport \"./SliderLabel.css\";\n\nclass SliderMap extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const siteData = this.props.sites;\n    const firstSite = Object.keys(siteData)[0];\n    const firstSiteData = siteData[firstSite][\"measurements\"];\n    const dates = Object.keys(firstSiteData).sort();\n\n    this.state = { currentDate: parseInt(dates[0]), measurementValue: 5 };\n    this.handleDateChange = this.handleDateChange.bind(this);\n    this.layerRef = React.createRef();\n  }\n\n  handleDateChange(event, timestamp) {\n    this.setState({ currentDate: parseInt(timestamp) });\n  }\n\n  createMarkerLayer() {\n    const sites = this.props.sites;\n\n    let markers = [];\n    for (const [site, siteData] of Object.entries(sites)) {\n      const siteName = String(site).toUpperCase();\n      const lat = siteData[\"latitude\"];\n      const long = siteData[\"longitude\"];\n      const longName = siteData[\"long_name\"];\n      const locationStr = `${siteName}, ${lat}, ${long}`;\n\n      const measurement = siteData[\"measurements\"][this.state.currentDate];\n\n      // Should use some correct binning here\n      let colour = \"black\";\n      if (measurement > 0 && measurement < 30) {\n        colour = \"green\";\n      } else if (measurement < 60) {\n        colour = \"orange\";\n      } else if (measurement < 150) {\n        colour = \"red\";\n      }\n\n      // This is usually bad practice but here we want to force new CircleMarkers\n      // to be created on the map\n      const circleKey = nanoid();\n\n      const circle = (\n        <CircleMarker\n          key={circleKey}\n          center={[lat, long]}\n          radius={15}\n          fillOpacity={0.9}\n          fillColor={colour}\n          stroke={false}\n        >\n          <Popup>\n            <div className={styles.marker}>\n              <div className={styles.markerHeader}>{siteName}</div>\n              <div className={styles.markerBody}>\n                Name: {longName}\n                <br /><br />\n                {new Date(this.state.currentDate).toLocaleDateString()}:{\" \"}\n                {measurement}\n              </div>\n              <div className={styles.markerLocation}>\n                Location: {locationStr}\n              </div>\n            </div>\n          </Popup>\n          ;\n        </CircleMarker>\n      );\n\n      markers.push(circle);\n    }\n\n    return markers;\n  }\n\n  createSlider() {\n    const siteData = this.props.sites;\n\n    const firstSite = Object.keys(siteData)[0];\n    const firstSiteData = siteData[firstSite][\"measurements\"];\n    const dates = Object.keys(firstSiteData).sort();\n\n    const startDate = parseInt(dates[0]);\n    const endDate = parseInt(dates[dates.length - 1]);\n\n    // We'll have to ensure that each of the sites has data for every date\n    // just add in NaNs for missing data - this can be done by the serverless fn\n    let marks = [];\n    // eslint-disable-next-line no-unused-vars\n    for (const [key, value] of Object.entries(firstSiteData)) {\n      const UNIXDate = parseInt(key);\n      const date = new Date(UNIXDate);\n\n      marks.push({ value: UNIXDate, label: date.toLocaleDateString() });\n    }\n\n    const slider = (\n      <Slider\n        defaultValue={0}\n        onChange={this.handleDateChange}\n        aria-labelledby=\"continuous-slider\"\n        marks={marks}\n        step={null}\n        max={endDate}\n        min={startDate}\n      />\n    );\n\n    return slider;\n  }\n\n  render() {\n    const zoom = this.props.zoom ? this.props.zoom : 5;\n    const width = this.props.width ? this.props.width : \"60vw\";\n    const height = this.props.height ? this.props.height : \"40vh\";\n\n    const style = { width: width, height: height };\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.mapBox}>\n          <MapContainer\n            center={this.props.centre}\n            zoom={zoom}\n            scrollWheelZoom={true}\n            style={style}\n          >\n            <TileLayer\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            <LayerGroup ref={this.layerRef}>\n              {this.createMarkerLayer()}\n            </LayerGroup>\n          </MapContainer>\n        </div>\n        <div className={styles.sliderBox}>{this.createSlider()}</div>\n      </div>\n    );\n  }\n}\n\nexport default SliderMap;\n","import \"./Dashboard.css\";\nimport React from \"react\";\nimport { nanoid } from \"nanoid\";\n\nimport randomData from \"./mock/randomSiteData.json\";\nimport londonGHGSites from \"./data/siteData.json\";\n\nimport LineChart from \"./components/LineChart/LineChart\";\nimport Summary from \"./components/Summary/Summary\";\nimport Overview from \"./components/Overview/Overview\";\nimport VisLayout from \"./components/VisLayout/VisLayout\";\nimport ControlPanel from \"./components/ControlPanel/ControlPanel\";\nimport GraphContainer from \"./components/GraphContainer/GraphContainer\";\nimport SliderMap from \"./components/SliderMap/SliderMap\";\n\nimport siteData from \"./mock/LGHGSitesRandomData.json\";\nimport colours from \"./data/colours.json\";\n\nfunction isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      sidePanel: false,\n      apiData: [],\n    };\n\n    // For the moment create some fake sites\n    this.state.sites = londonGHGSites;\n    // This data will come from a function but for now just read it in\n    this.state.apiData = this.processData();\n\n    this.toggleSidePanel = this.toggleSidePanel.bind(this);\n    this.dataSelector = this.dataSelector.bind(this);\n    this.processData = this.processData.bind(this);\n  }\n\n  // Need a function to process the data that's keyed\n  processData() {\n    // const data = this.state.apiData;\n    const data = randomData;\n\n    // Process the data and create the correct Javascript time objects\n    let dataKeys = {};\n    let processedData = {};\n\n    for (const site of Object.keys(data)) {\n      dataKeys[site] = {};\n      processedData[site] = {};\n\n      for (const species of Object.keys(data[site])) {\n        dataKeys[site][species] = false;\n\n        const gas_data = data[site][species];\n\n        const x_timestamps = Object.keys(gas_data);\n        const x_values = x_timestamps.map((d) => new Date(parseInt(d)));\n        // Extract the count values\n        const y_values = Object.values(gas_data);\n\n        // Create a structure that plotly expects\n        processedData[site][species] = {\n          x_values: x_values,\n          y_values: y_values,\n        };\n      }\n    }\n\n    // Disabled the no direct mutation rule here as this only gets called from the ctor\n    /* eslint-disable react/no-direct-mutation-state */\n    this.state.processedData = processedData;\n    this.state.dataKeys = dataKeys;\n    /* eslint-enable react/no-direct-mutation-state */\n  }\n\n  dataSelector(dataKeys) {\n    this.setState({ selectedKeys: dataKeys });\n  }\n\n  createGraphs() {\n    let visualisations = [];\n\n    const selectedKeys = this.state.selectedKeys;\n\n    let speciesData = {};\n\n    if (selectedKeys) {\n      for (const [site, subObj] of Object.entries(selectedKeys)) {\n        for (const [species, value] of Object.entries(subObj)) {\n          if (value) {\n            // Create a visualisation and add it to the list\n            const data = randomData[site][species];\n\n            if (!speciesData.hasOwnProperty(species)) {\n              speciesData[species] = {};\n            }\n\n            speciesData[species][site] = data;\n          }\n        }\n      }\n\n      let totalSites = 0;\n\n      const tableau10 = colours[\"tableau10\"];\n\n      if (!isEmpty(speciesData)) {\n        for (const [species, siteData] of Object.entries(speciesData)) {\n          // Create a graph for each species\n          const title = String(species).toUpperCase();\n          const key = title.concat(\"-\", Object.keys(siteData).join(\"-\"));\n          const containerKey = `container-${key}`;\n\n          const nSites = Object.keys(siteData).length;\n\n          const selectedColours = tableau10.slice(totalSites, totalSites + nSites);\n\n          //   for (let i = 0; i < nSites; i++) {\n          //     tableau10.push(tableau10.shift());\n          //   }\n\n          const vis = (\n            <GraphContainer key={containerKey}>\n              <LineChart\n                divID={this.getID()}\n                data={siteData}\n                colours={selectedColours}\n                title={title}\n                xLabel=\"Date\"\n                yLabel=\"Concentration\"\n                key={key}\n              />\n            </GraphContainer>\n          );\n\n          visualisations.push(vis);\n\n          totalSites += nSites;\n        }\n      }\n    }\n\n    return visualisations;\n  }\n\n  componentDidMount() {\n    // const apiURL = \"\";\n    // fetch(apiURL)\n    //   .then((res) => res.json())\n    //   .then(\n    //     (result) => {\n    //       this.setState({\n    //         isLoaded: true,\n    //         weatherData: result,\n    //         // or apiData\n    //       });\n    //     },\n    //     (error) => {\n    //       this.setState({\n    //         isLoaded: true,\n    //         error,\n    //       });\n    //     }\n    //   );\n  }\n\n  getID() {\n    // Create a unique ID for each visualisation\n    return \"vis-id-\" + nanoid();\n  }\n\n  toggleSidePanel() {\n    this.setState({ sidePanel: !this.state.sidePanel });\n  }\n\n  render() {\n    let { error, isLoaded } = this.state;\n\n    // Just set this as true for now as we're not pulling anything\n    // from an API\n    isLoaded = true;\n\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"grid-container\">\n          <div className=\"header\">\n            <div onClick={this.toggleSidePanel} className=\"nav-icon\">\n              <div></div>\n            </div>\n            LondonGHG Dashboard\n          </div>\n          <div className=\"main\">\n            <div className=\"main-side\">\n              <ControlPanel dataKeys={this.state.dataKeys} dataSelector={this.dataSelector} />\n            </div>\n            <div className=\"main-panel\">\n              <SliderMap sites={siteData} centre={[51.5, -0.0482]} zoom={11} width={\"75vw\"} height={\"65vh\"} />\n              <Summary>\n                <div>\n                  To tackle climate change, we need to measure and reduce carbon emissions. London GHG is installing a\n                  new network of atmospheric measurements across the capital, and developing a new modelling framework\n                  to provide emission estimates of carbon dioxide and methane.\n                </div>\n              </Summary>\n\n              <Overview />\n\n              <VisLayout>{this.createGraphs()}</VisLayout>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Dashboard;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Dashboard from './Dashboard';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dashboard />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}