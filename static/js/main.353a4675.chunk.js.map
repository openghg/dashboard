{"version":3,"sources":["Dashboard.module.css","components/ControlPanel/ControlPanel.module.css","components/Overlay/Overlay.module.css","components/EmissionsBox/EmissionsBox.module.css","components/TextButton/TextButton.module.css","components/QnA/QnA.module.css","components/ExplanationBox/ExplanationBox.module.css","components/ObsBox/ObsBox.module.css","components/EstimatesExplainer/EstimatesExplainer.module.css","components/LeafletMap/LeafletMap.module.css","components/ObsExplainer/ObsExplainer.module.css","components/OverlayContainer/OverlayContainer.module.css","components/FAQ/FAQ.module.css","components/MultiSiteLineChart/MultiSiteLineChart.module.css","components/RadioButtons/RadioButtons.module.css","components/NiceButton/NiceButton.module.css","images/siteImages sync nonrecursive //.jpe?g$","images/siteImages/BTT.jpg","images/siteImages/NPL.jpg","images/siteImages/TMB.jpg","images/OpenGHG_Logo_Portrait.svg","components/TextButton/TextButton.js","components/Overlay/Overlay.js","components/ControlPanel/ControlPanel.js","components/OverlayContainer/OverlayContainer.js","components/QnA/QnA.js","components/FAQ/FAQ.js","components/ExplanationBox/ExplanationBox.js","components/LeafletMap/LeafletMap.js","components/GraphContainer/GraphContainer.js","components/MultiSiteLineChart/MultiSiteLineChart.js","components/RadioButtons/RadioButtons.js","components/NiceButton/NiceButton.js","components/ObsBox/ObsBox.js","util/helpers.js","components/ObsExplainer/ObsExplainer.js","components/LiveData/LiveData.js","components/EstimatesExplainer/EstimatesExplainer.js","images/emissionsPNGs/ch4/uk_raw/ch4_ukghg_map_combustion_20170101T00.png","images/emissionsPNGs/ch4/uk_raw/ch4_ukghg_map_production_20170101T00.png","images/emissionsPNGs/ch4/uk_raw/ch4_ukghg_map_waste_20170101T00.png","images/emissionsPNGs/ch4/uk_raw/ch4_ukghg_map_sectors_stacked_20170101T00.png","images/emissionsPNGs/co2/uk_raw/co2_ukghg_map_natural_20170101T00.png","images/emissionsPNGs/co2/uk_raw/co2_ukghg_map_combustion_20170101T00.png","images/emissionsPNGs/co2/uk_raw/co2_ukghg_map_production_20170101T00.png","images/emissionsPNGs/co2/uk_raw/co2_ukghg_map_sectors_stacked_20170101T00.png","components/EmissionsBox/EmissionsBox.js","images/modelVideos/inversion_demo_UK_optim.gif","images/methane_BEIS_2019.png","images/modelImage/emissions_measurements_image.png","components/Explainer/Explainer.js","Dashboard.js","reportWebVitals.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","TextButton","style","styles","light","styling","this","props","dark","selected","speciesSelected","extraStyling","onClickParam","type","data-onclickparam","className","onClick","children","React","Component","Overlay","image","src","alt","container","closeButton","toggleOverlay","fontSize","textContainer","header","body","text","ControlPanel","createOverlay","bind","area","target","dataset","onclickparam","textData","hasOwnProperty","setOverlay","console","error","closePanel","headerText","headerTag","content","footer","href","rel","OpenGHGLogo","useState","open","setOpen","overlay","useBackground","overlayNoBackground","data-testid","stopPropagation","defaultProps","QnA","questionNumber","number","questionText","question","answerText","answer","split","splitText","i","itemContainer","questionContainer","String","toUpperCase","FAQ","main","ExplanationBox","nogap","containerNoGap","explainerText","explain","intro","LeafletMap","handleClick","siteSelector","options","data","metadata","markers","seenSites","Set","values","speciesData","entries","network","networkData","site","value","has","latitude","longitude","locationStr","location","colourHex","colours","marker","CircleMarker","center","eventHandlers","click","fillColor","color","fill","fillOpacity","radius","Popup","markerBody","markerLocation","push","add","imgOverlay","overlayImg","overlayBounds","imgPath","bounds","ImageOverlay","url","opacity","zIndex","attribution","mapstyle","extraAttr","processSites","zoom","MapContainer","centre","scrollWheelZoom","width","tap","TileLayer","LayerGroup","GraphContainer","state","height","contRef","createRef","node","current","dbcontent","document","getElementById","widthScale","heightScale","parentNode","clientHeight","clientWidth","setState","updateDimensions","window","addEventListener","removeEventListener","ref","cloneElement","MultiSiteLineChart","plotData","maxY","minY","Infinity","selectedSpecies","siteData","sectorData","siteMetadata","xValues","yValues","max","Math","min","name","colour","units","trace","x","y","mode","line","hovertemplate","dateMarkObject","selectedDate","date","Date","parseInt","x0","y0","x1","y1","layout","title","font","size","xanchor","yanchor","xaxis","range","xRange","showgrid","linecolor","autotick","ticks","yaxis","automargin","yLabel","standoff","yRange","zeroline","showlegend","legend","margin","l","r","b","t","pad","shapes","RadioButtons","onChangeValue","event","onChange","buttons","option","checked","optionUpper","label","button","handleChange","NiceButton","niceButton","ObsBox","selectedKeys","processedData","selectedSites","emptyMessage","obj","speciesEmissions","multiUnits","sector","set","log","length","key","join","divID","nanoid","xLabel","clearButton","clearSelectedSites","select","speciesSelector","plot","createEmissionsGraphs","ObsExplainer","LiveData","dataSelector","clearSites","defaultSpecies","createIntro","timeseries","createObsBox","mapExplainer","siteMap","siteInfoOverlay","setSiteOverlay","EstimatesExplainer","EmissionsBox","images","CH4","Combustion","comb_ch4","Production","prod_ch4","Total","stacked_ch4","Waste","waste_ch4","colorbars","CO2","Natural","natural_co2","comb_co2","stacked_co2","production_co2","setImage","setSpecies","selectedSector","species","innerText","selectedImages","sectorButtons","sort","speciesButtons","emissionsImage","overlayMidpoint","Explainer","altText","bodyText","explainerContent","emissionsMap","createEmissionsBox","emissionsExplainer","createEmissionsExplainer","dispersionExplainer","createModelExplainer","dispersionImage","gasDispersionImage","comparisonExplainer","createComparisonExplainer","modelImprovement","inversionDemo","estimatesExplainer","estimatesImage","inventoryComparison","linkType","Dashboard","isLoaded","showSidebar","dataKeys","footprintView","emptySelection","overlayOpen","plotType","layoutMode","defaultNetwork","measurementData","defaultSite","buildSiteInfo","toggleSidebar","siteImages","siteInfo","requiredJPGs","require","paths","path","filename","sansExtension","importSiteImages","siteInfoJSON","selectedSite","siteLower","toLowerCase","cloneDeep","delete","dataVar","speciesLower","rawData","next","uniqueSites","gasData","defaultValue","timeseriesData","graphData","x_values","d","y_values","colour_start_end","siteIndex","networkIndex","siteColours","localSiteData","nSites","start_end","colorMap","chroma","scale","colors","colourCode","fetch","then","res","json","result","processData","subdict","siteCode","siteText","OverlayContainer","extraSidebarStyle","transform","message","gridContainer","menuIcon","sidebar","to","navLink","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,cAAgB,iCAAiC,SAAW,4BAA4B,OAAS,0BAA0B,eAAiB,kCAAkC,QAAU,2BAA2B,OAAS,0BAA0B,MAAQ,yBAAyB,WAAa,8BAA8B,aAAe,gCAAgC,QAAU,2BAA2B,aAAe,gCAAgC,KAAO,wBAAwB,QAAU,2BAA2B,iBAAmB,oCAAoC,WAAa,8BAA8B,QAAU,2BAA2B,iBAAmB,oCAAoC,aAAe,gCAAgC,aAAe,gCAAgC,mBAAqB,sCAAsC,SAAW,4BAA4B,eAAiB,kCAAkC,oBAAsB,uCAAuC,gBAAkB,mCAAmC,oBAAsB,uCAAuC,mBAAqB,sCAAsC,eAAiB,kCAAkC,iBAAmB,oCAAoC,SAAW,8B,2BCA3yCD,EAAOC,QAAU,CAAC,UAAY,gCAAgC,OAAS,6BAA6B,WAAa,iCAAiC,UAAY,gCAAgC,YAAc,kCAAkC,QAAU,8BAA8B,WAAa,iCAAiC,OAAS,+B,iBCA7UD,EAAOC,QAAU,CAAC,UAAY,2BAA2B,YAAc,6BAA6B,cAAgB,+BAA+B,OAAS,wBAAwB,MAAQ,uBAAuB,UAAY,2BAA2B,cAAgB,+BAA+B,KAAO,sBAAsB,MAAQ,yB,gBCA9UD,EAAOC,QAAU,CAAC,UAAY,gCAAgC,KAAO,2BAA2B,KAAO,2BAA2B,QAAU,8BAA8B,eAAiB,qCAAqC,cAAgB,oCAAoC,KAAO,6B,mBCA3RD,EAAOC,QAAU,CAAC,MAAQ,0BAA0B,KAAO,yBAAyB,SAAW,6BAA6B,gBAAkB,sC,gBCA9ID,EAAOC,QAAU,CAAC,cAAgB,2BAA2B,kBAAoB,+BAA+B,aAAe,0BAA0B,eAAiB,4BAA4B,OAAS,sB,gBCA/MD,EAAOC,QAAU,CAAC,UAAY,kCAAkC,eAAiB,uCAAuC,OAAS,+BAA+B,MAAQ,8BAA8B,QAAU,kC,gBCAhND,EAAOC,QAAU,CAAC,UAAY,0BAA0B,OAAS,uBAAuB,KAAO,qBAAqB,OAAS,uBAAuB,YAAc,4BAA4B,KAAO,qBAAqB,aAAe,+B,gBCAzOD,EAAOC,QAAU,CAAC,UAAY,sCAAsC,eAAiB,2CAA2C,OAAS,mCAAmC,MAAQ,kCAAkC,QAAU,sC,kBCAhOD,EAAOC,QAAU,CAAC,UAAY,8BAA8B,OAAS,2BAA2B,aAAe,iCAAiC,WAAa,+BAA+B,eAAiB,qC,gBCA7MD,EAAOC,QAAU,CAAC,UAAY,gCAAgC,eAAiB,qCAAqC,OAAS,6BAA6B,QAAU,8BAA8B,GAAK,yBAAyB,YAAY,kC,wugQCA5OD,EAAOC,QAAU,CAAC,QAAU,kCAAkC,oBAAsB,8CAA8C,UAAY,sC,gBCA9ID,EAAOC,QAAU,CAAC,KAAO,kBAAkB,QAAU,uB,uLCArDD,EAAOC,QAAU,CAAC,UAAY,sCAAsC,SAAS,mCAAmC,SAAS,qC,gBCAzHD,EAAOC,QAAU,CAAC,QAAU,gC,gBCA5BD,EAAOC,QAAU,CAAC,WAAa,iC,kDCD/B,IAAIC,EAAM,CACT,YAAa,GACb,YAAa,GACb,YAAa,IAId,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBN,EAAOC,QAAUE,EACjBA,EAAeE,GAAK,I,6BCxBpB,OAAe,cAA0B,iC,6BCAzC,OAAe,cAA0B,iC,6BCAzC,OAAe,cAA0B,iC,6KCA1B,MAA0B,kD,wBCgD1BU,E,4JA1Cb,WACE,IAAIC,EAAQC,IAAOC,MACbC,EAAUC,KAAKC,MAAMF,QACX,SAAZA,EACFH,EAAQC,IAAOK,KACM,aAAZH,EACTH,EAAQC,IAAOM,SACM,oBAAZJ,IACTH,EAAQC,IAAOO,iBAIdJ,KAAKC,MAAME,WACZP,EAAQC,IAAOK,MAGjB,IAAMG,EAAeL,KAAKC,MAAMI,aAAeL,KAAKC,MAAMI,aAAe,GACnEC,EAAeN,KAAKC,MAAMK,aAEhC,OACE,wBACEC,KAAK,SACLC,oBAAmBF,EACnBG,UAAWb,EACXA,MAAOS,EACPK,QAASV,KAAKC,MAAMS,QALtB,SAOGV,KAAKC,MAAMU,e,GA5BKC,IAAMC,W,iBCiChBC,E,4JA9Bb,WACE,IAAIC,EAAQ,KAKZ,OAJIf,KAAKC,MAAMc,QACbA,EAAQ,qBAAKC,IAAKhB,KAAKC,MAAMc,MAAOE,IAAKjB,KAAKC,MAAMgB,OAIpD,sBAAKR,UAAWZ,IAAOqB,UAAvB,UACE,qBAAKT,UAAWZ,IAAOsB,YAAvB,SACE,cAAC,EAAD,CAAYT,QAASV,KAAKC,MAAMmB,cAAerB,QAAS,OAAQM,aAAc,CAAEgB,SAAU,SAA1F,iBAIF,sBAAKZ,UAAWZ,IAAOyB,cAAvB,UACE,qBAAKb,UAAWZ,IAAO0B,OAAvB,SAAgCvB,KAAKC,MAAMsB,SAC3C,qBAAKd,UAAWZ,IAAO2B,KAAvB,SAA8BxB,KAAKC,MAAMwB,UAE3C,qBAAKhB,UAAWZ,IAAOkB,MAAvB,SAA+BA,W,GAlBjBH,IAAMC,WCsDba,E,kDAlDb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IAED0B,cAAgB,EAAKA,cAAcC,KAAnB,gBAHJ,E,iDAMnB,SAAcvC,GACZ,IAAMwC,EAAOxC,EAAEyC,OAAOC,QAAQC,aAE9B,GAAKC,EAASC,eAAeL,GAA7B,CAKA,IAAMJ,EAAOQ,EAASJ,GACtB7B,KAAKC,MAAMmB,gBACXpB,KAAKC,MAAMkC,WAAW,cAAC,EAAD,CAASV,KAAMA,EAAML,cAAepB,KAAKC,MAAMmB,sBANnEgB,QAAQC,MAAR,wC,oBASJ,WACE,OACE,sBAAK5B,UAAWZ,IAAOqB,UAAvB,UACE,qBAAKT,UAAWZ,IAAOsB,YAAvB,SACE,cAAC,EAAD,CAAYpB,QAAQ,QAAQM,aAAc,CAAEgB,SAAU,OAASX,QAASV,KAAKC,MAAMqC,WAAnF,iBAIF,sBAAK7B,UAAWZ,IAAO0B,OAAvB,UACE,qBAAKd,UAAWZ,IAAO0C,WAAvB,2CACA,qBAAK9B,UAAWZ,IAAO2C,UAAvB,2BAEF,qBAAK/B,UAAWZ,IAAO4C,QAAvB,SAAiCzC,KAAKC,MAAMU,WAC5C,qBAAKF,UAAWZ,IAAO6C,OAAvB,SACE,mBAAGC,KAAK,uCAAuCC,IAAI,aAAad,OAAO,SAAvE,SACE,qBAAKd,IAAK6B,EAAa5B,IAAI,4B,GAnCZL,IAAMC,W,iBCJjC,SAASC,EAAQb,GAAQ,IAAD,GAEE6C,EADHlC,IAAbkC,WACyB,GAFX,mBAEfC,EAFe,KAETC,EAFS,KAGtB,GAAID,EAAM,CACR,IAAInD,EAAQC,IAAOoD,QAMnB,OAJKhD,EAAMiD,gBACTtD,EAAQC,IAAOsD,qBAIf,qBACEC,cAAY,UACZ3C,UAAWb,EACXc,QAAS,WACPT,EAAMmB,gBACN4B,GAAQ,IALZ,SAQE,qBACEtC,QAAS,SAACrB,GACRA,EAAEgE,mBAFN,SAKGpD,EAAMU,aAKf,OAAO,KAGTG,EAAQwC,aAAe,CACrBJ,eAAe,GAGFpC,Q,iBCDAyC,E,4JAnCb,WACE,IAAMC,EAAiBxD,KAAKC,MAAMwD,OAC5BC,EAAe1D,KAAKC,MAAM0D,SAE5BC,EAAa5D,KAAKC,MAAM4D,OACtBC,EAAQ9D,KAAKC,MAAM6D,MAEzB,GAAIF,IAAwB,IAAVE,EAAgB,CAChC,IAAMC,EAAYH,EAAWE,MAAM,MAAMhF,KAAI,SAACkF,GAC5C,OAAO,4BAAIA,OAGbJ,EAAaG,EAaf,OATE,sBAAKtD,UAAWZ,IAAOoE,cAAvB,UACE,sBAAKxD,UAAWZ,IAAOqE,kBAAvB,UACE,qBAAKzD,UAAWZ,IAAO2D,eAAvB,SAAwCW,OAAOX,GAAgBY,gBAC/D,qBAAK3D,UAAWZ,IAAO6D,aAAvB,SAAsCA,OAExC,qBAAKjD,UAAWZ,IAAOgE,OAAvB,SAAgCD,W,GAtBtBhD,IAAMC,W,iBC2ETwD,E,4JA1Eb,WAyDE,OACE,qBAAK5D,UAAWZ,IAAOyE,KAAvB,SACE,sBAAK7D,UAAWZ,IAAO4C,QAAvB,UACE,cAAC,EAAD,CAAKgB,OAAO,KAAKK,OAAO,EAAOH,SA3D1B,2EA2DwCE,OA1D3C,gdA2DF,cAAC,EAAD,CAAKJ,OAAO,KAAKK,OAAO,EAAMH,SArDzB,gEAqDuCE,OApD1C,ksBAqDF,cAAC,EAAD,CAAKJ,OAAO,KAAKK,OAAO,EAAOH,SAhD1B,oDAgDwCE,OA/C3C,soBAgDF,cAAC,EAAD,CAAKJ,OAAO,KAAKK,OAAO,EAAOH,SAzC1B,gDAyCwCE,OAxC3C,uqBAyCF,cAAC,EAAD,CAAKJ,OAAO,KAAKK,OAAO,EAAOH,SAlC1B,gDAkCwCE,OAjC3C,iVAkCF,cAAC,EAAD,CAAKJ,OAAO,KAAKK,OAAO,EAAOH,SA9B1B,8CA8BwCE,OA7B3C,onBA8BF,cAAC,EAAD,CAAKJ,OAAO,KAAKK,OAAO,EAAOH,SAvB1B,iEAuBwCE,OAtB3C,6eAuBF,cAAC,EAAD,CAAKJ,OAAO,KAAKK,OAAO,EAAOH,SAlB1B,+CAkBwCE,OAjB3C,2rB,GAnDMjD,IAAMC,W,iBC+BT0D,E,4JA9Bb,WACE,IAAM3E,EAAQI,KAAKC,MAAMuE,MAAQ3E,IAAO4E,eAAiB5E,IAAOqB,UAE5DwD,EAAgB1E,KAAKC,MAAM0E,QACzBb,EAAQ9D,KAAKC,MAAM6D,MAEzB,GAAIY,IAA2B,IAAVZ,EAAgB,CACnC,IAAMC,EAAYW,EAAcZ,MAAM,MAAMhF,KAAI,SAACkF,GAC/C,OAAO,4BAAIA,OAGbU,EAAgBX,EAGlB,OACE,sBAAKtD,UAAWb,EAAhB,UACE,qBAAKa,UAAWZ,IAAO0B,OAAvB,SAAgCvB,KAAKC,MAAMsB,SAC3C,qBAAKd,UAAWZ,IAAO+E,MAAvB,SAA+B5E,KAAKC,MAAM2E,QAC1C,qBAAKnE,UAAWZ,IAAO8E,QAAvB,SAAiCD,W,GAnBZ9D,IAAMC,W,iECyIpBgE,E,kDArIb,WAAY5E,GAAQ,IAAD,8BACjB,cAAMA,IAED6E,YAAc,EAAKA,YAAYlD,KAAjB,gBAHF,E,+CAMnB,SAAYvC,GACVW,KAAKC,MAAM8E,aAAa1F,EAAEyC,OAAOkD,QAAQC,Q,0BAG3C,WACE,IAAMC,EAAWlF,KAAKC,MAAMiF,SAE5B,IAAKA,EACH,OAAO,KAOT,IAJA,IAAIC,EAAU,GAEVC,EAAY,IAAIC,IAEpB,MAA0B5F,OAAO6F,OAAOJ,GAAxC,eACE,IADG,IAAMK,EAAW,KACpB,MAAqC9F,OAAO+F,QAAQD,GAApD,eACE,IADiE,IAAD,sBAAtDE,EAAsD,KAA7CC,EAA6C,KAChE,MAA4BjG,OAAO+F,QAAQE,GAA3C,eAAyD,CAAC,IAAD,sBAA7CC,EAA6C,KAAvCC,EAAuC,KACvD,IAAIR,EAAUS,IAAIF,GAAlB,CAIA,IAAMG,EAAWF,EAAK,SAChBG,EAAYH,EAAK,UAEjBI,EAAW,UAAMF,EAAN,aAAmBC,GAC9BE,EAAW,CAACH,EAAUC,GAEtBG,EAAYlG,KAAKC,MAAMkG,QAAQV,GAASE,GAExCS,EACJ,cAACC,EAAA,EAAD,CAEEC,OAAQL,EACRhB,KAAMU,EACNY,cAAe,CACbC,MAAOxG,KAAK8E,aAEd2B,UAAWP,EACXQ,MAAOR,EACPS,MAAM,EACNC,YAAa,EACbC,OAAQ,GAXV,SAaE,cAACC,EAAA,EAAD,UACE,sBAAKrG,UAAWZ,IAAOuG,OAAvB,UACE,sBAAK3F,UAAWZ,IAAOkH,WAAvB,UACGnB,EAAK,UACN,uBACA,uBAHF,WAIWA,EAAK,KACd,uBACA,uBANF,qEAO8DH,MAU9D,sBAAKhF,UAAWZ,IAAOmH,eAAvB,uBAAkDhB,WA/BjDA,GAqCTb,EAAQ8B,KAAKb,GACbhB,EAAU8B,IAAIvB,IAKpB,OAAOR,I,oBAGT,WACE,IAAIgC,EAAa,KACjB,GAAInH,KAAKC,MAAMmH,YAAcpH,KAAKC,MAAMoH,cAAe,CACrD,IAAMC,EAAUtH,KAAKC,MAAMmH,WACrBG,EAASvH,KAAKC,MAAMoH,cAE1BF,EAAa,cAACK,EAAA,EAAD,CAAcC,IAAKH,EAASC,OAAQA,EAAQG,QAAS,GAAKC,OAAQ,KAGjF,IAAIF,EAAM,qDACNG,EAAc,2EAClB,GAAI5H,KAAKC,MAAM4H,UAAoC,WAAxB7H,KAAKC,MAAM4H,SAAuB,CAC3DJ,EAAM,+EAGNG,EAAcE,8JAGhB,IAAM3C,EAAUnF,KAAK+H,eACfC,EAAOhI,KAAKC,MAAM+H,KAAOhI,KAAKC,MAAM+H,KAAO,EAIjD,OACE,qBAAKvH,UAAWZ,IAAOqB,UAAvB,SACE,eAAC+G,EAAA,EAAD,CAAc3B,OAAQtG,KAAKC,MAAMiI,OAAQF,KAAMA,EAAMG,iBAAiB,EAAMvI,MAJlE,CAAEwI,MAAO,OAIuEC,KAAK,EAA/F,UACE,cAACC,EAAA,EAAD,CAAWV,YAAaA,EAAaH,IAAKA,IAC1C,cAACc,EAAA,EAAD,UAAapD,IACb,cAACoD,EAAA,EAAD,UAAapB,a,GAjHEvG,IAAMC,W,gBCyChB2H,E,kDA7Cb,WAAYvI,GAAQ,IAAD,8BACjB,cAAMA,IAEDwI,MAAQ,CAAEL,MAAO,KAAMM,OAAQ,KACpC,EAAKC,QAAU/H,IAAMgI,YAJJ,E,oDAOnB,WACE,IAAMC,EAAO7I,KAAK2I,QAAQG,QACpBC,EAAYC,SAASC,eAAe,gBACpCC,EAAalJ,KAAKC,MAAMiJ,WAAalJ,KAAKC,MAAMiJ,WAAa,EAC7DC,EAAcnJ,KAAKC,MAAMkJ,YAAcnJ,KAAKC,MAAMkJ,YAAc,EAEtE,GAAIN,EAAM,CACR,IAAMH,EAASS,EAAcN,EAAKO,WAAWC,aACvCjB,EAAQc,EAAaH,EAAUO,YACrCtJ,KAAKuJ,SAAS,CAAEb,OAAQA,EAAQN,MAAOA,O,+BAI3C,WACEpI,KAAKwJ,mBACLC,OAAOC,iBAAiB,SAAU1J,KAAKwJ,iBAAiB5H,KAAK5B,S,kCAG/D,WACEyJ,OAAOE,oBAAoB,SAAU3J,KAAKwJ,iBAAiB5H,KAAK5B,S,oBAGlE,WACE,OACE,qBAAK4J,IAAK5J,KAAK2I,QAAf,SACG/H,IAAMiJ,aAAa7J,KAAKC,MAAMU,SAAU,CACvC+H,OAAQ1I,KAAKyI,MAAMC,OACnBN,MAAOpI,KAAKyI,MAAML,c,GAnCCxH,IAAMC,W,gDCkJpBiJ,G,4JA/Ib,WAQE,IAPA,IAAIC,EAAW,GACXC,EAAO,EACPC,EAAOC,IAELjF,EAAOjF,KAAKC,MAAMgF,KAClBkF,EAAkBnK,KAAKC,MAAMkK,gBAEnC,MAAqC1K,OAAO+F,QAAQP,GAApD,eACE,IAD0D,IAAD,sBAA/CQ,EAA+C,KAAtCC,EAAsC,KACzD,MAA+BjG,OAAO+F,QAAQE,GAA9C,eACE,IAD2D,IAAD,sBAAhDC,EAAgD,KAA1CyE,EAA0C,KAC1D,MAAyB3K,OAAO6F,OAAO8E,GAAvC,eAAkD,CAA7C,IAAMC,EAAU,KACbnF,EAAWlF,KAAKC,MAAMqK,aAAaH,GAAiB1E,GAASE,GAC7D4E,EAAUF,EAAU,SACpBG,EAAUH,EAAU,SAEpBI,EAAMC,KAAKD,IAAL,MAAAC,KAAI,YAAQF,IAClBG,EAAMD,KAAKC,IAAL,MAAAD,KAAI,YAAQF,IAEpBC,EAAMT,IACRA,EAAOS,GAGLE,EAAMV,IACRA,EAAOU,GAIT,IAAIC,EAAO,KACX,IACEA,EAAO1F,EAAQ,UACf,MAAO7C,GACPD,QAAQC,MAAR,0CAAiDA,IAGnD,IAAMwI,EAAS7K,KAAKC,MAAMkG,QAAQV,GAASE,GACrCmF,EAAQ9K,KAAKC,MAAM6K,MAEnBC,EAAQ,CACZC,EAAGT,EACHU,EAAGT,EACHM,MAAO9K,KAAKC,MAAM6K,MAClBI,KAAM,QACNC,KAAM,CACJ/C,MAAO,EACP1B,MAAOmE,GAETD,KAAMA,EACNQ,cAAc,0DAAD,OAA4DN,EAA5D,SAGff,EAAS9C,KAAK8D,GAKpB,IAAIM,EAAiB,KACfC,EAAetL,KAAKC,MAAMqL,aAEhC,GAAIA,EAAc,CAChB,IAAMC,EAAO,IAAIC,KAAKC,SAASH,IAE/BD,EAAiB,CACf9K,KAAM,OACNmL,GAAIH,EACJI,GAAI1B,EACJ2B,GAAIL,EACJM,GAAI7B,EACJmB,KAAM,CACJzE,MAAO,QACP0B,MAAO,IAKb,IAEM0D,EAAS,CACbC,MAAO,CACLtK,KAAMzB,KAAKC,MAAM8L,MAAQ/L,KAAKC,MAAM8L,MAAQ,KAC5CC,KAAM,CACJC,KAAM,IAERC,QAAS,SACTjB,EAAG,IACHkB,QAAS,OAEXC,MAAO,CACLC,MAAOrM,KAAKC,MAAMqM,OAAStM,KAAKC,MAAMqM,OAAS,KAC/CC,UAAU,EACVC,UAAW,QACXC,UAAU,EACVC,MAAO,WAETC,MAAO,CACLC,YAAY,EACZb,MAAO,CACLtK,KAAMzB,KAAKC,MAAM4M,OACjBC,SAAU,GAEZT,MAAOrM,KAAKC,MAAM8M,OAAS/M,KAAKC,MAAM8M,OAAS,KAC/CR,UAAU,EACVC,UAAW,QACXC,UAAU,EACVC,MAAO,UACPM,UAAU,GAEZC,YAAY,EACZC,OAAQ,CACNlC,EAAG,EACHkB,QAAS,QACTjB,EAAG,GAEL7C,MAtCuB,KAsCGpI,KAAKC,MAAMmI,MACrCM,OAAQ1I,KAAKC,MAAMyI,OACnByE,OAAQ,CACNC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,IAAK,GAEPC,OAAQ,CAACpC,IAGX,OACE,qBAAKjI,cAAa,WAAY3C,UAAWZ,KAAOqB,UAAhD,SACE,cAAC,KAAD,CAAM+D,KAAM8E,EAAU+B,OAAQA,U,GA/HLlL,IAAMC,W,8DC4DxB6M,G,kDA5Db,aAAe,IAAD,8BACZ,gBAEKC,cAAgB,EAAKA,cAAc/L,KAAnB,gBAHT,E,iDAMd,SAAcgM,GACZ5N,KAAKC,MAAM4N,SAASD,EAAM9L,OAAO8D,S,oBAGnC,WAIE,IAHA,IAAMZ,EAAUhF,KAAKC,MAAM+E,QAEvB8I,EAAU,GACd,MAAqBrO,OAAOD,KAAKwF,GAAjC,eAA2C,CAAtC,IAAM+I,EAAM,KACTC,EAAUD,IAAW/N,KAAKC,MAAME,SAEhC8N,EAAcF,EAAO3J,cAEvB8J,EAAQ,KAEVA,EADkB,QAAhBD,EAEA,mCACI,uCAGmB,QAAhBA,EAEP,mCACI,uCAIE,4BAAIA,IAGd,IAAME,EACJ,kCACGD,EACD,uBAAO3N,KAAK,QAAQqF,MAAOmI,EAAQC,QAASA,EAASH,SAAU7N,KAAKoO,iBAF1DL,GAMdD,EAAQ7G,KAAKkH,GAGf,OACE,qBAAK1N,UAAWZ,KAAOiO,QAASD,SAAU7N,KAAK2N,cAA/C,SACGG,Q,GAjDkBlN,IAAMC,W,oBC4BlBwN,G,4JA1Bb,WACE,IAAMzO,EAAQC,KAAOyO,WACfjO,EAAeL,KAAKC,MAAMI,aAAeL,KAAKC,MAAMI,aAAe,GACnEC,EAAeN,KAAKC,MAAMK,aAEhC,OACE,wBACEC,KAAK,SACLC,oBAAmBF,EACnBG,UAAWb,EACXA,MAAOS,EACPK,QAASV,KAAKC,MAAMS,QALtB,SAOGV,KAAKC,MAAMU,e,GAdKC,IAAMC,WC4IhB0N,G,2KAlIb,WACE,IAAMC,EAAexO,KAAKC,MAAMuO,aAC1BC,EAAgBzO,KAAKC,MAAMwO,cAC3BC,EAAgB1O,KAAKC,MAAMyO,cAC3BvE,EAAkBnK,KAAKC,MAAMkK,gBAC7BjF,EAAWlF,KAAKC,MAAMiF,SAI5B,GAF8C,IAAvBwJ,EAAczC,KAGnC,OAAO,qBAAKxL,UAAWZ,KAAO8O,aAAvB,kCAGT,ICrBoBC,EDqBhBC,EAAmB,GACnBC,EAAa,GAEjB,GAAIN,EAAc,CAGhB,IAFA,IAAMjJ,EAAciJ,EAAarE,GAEjC,MAAqC1K,OAAO+F,QAAQD,GAApD,eACE,IADiE,IAAD,sBAAtDE,EAAsD,KAA7CC,EAA6C,KAChE,MAAiCjG,OAAO+F,QAAQE,GAAhD,eACE,IAD6D,IAAD,sBAAlDC,EAAkD,KAA5C0E,EAA4C,KAC5D,MAA8B5K,OAAO+F,QAAQ6E,GAA7C,eAA0D,CAAC,IAAD,sBAA9C0E,EAA8C,KACxD,GADwD,KAC7C,CAOT,IAAM9J,EAAOwJ,EAActE,GAAiB1E,GAASE,GAAMoJ,GAC3DC,cAAIH,EAAD,UAAsBpJ,EAAtB,YAAiCE,EAAjC,YAAyCoJ,GAAU9J,GAEtD,IACE6J,EAAW7H,KAAK/B,EAASiF,GAAiB1E,GAASE,GAAnC,OAChB,MAAOtD,GACPD,QAAQ6M,IAAR,gCAAqC5M,MAO/C,GClDkBuM,EDkDLC,ECjDkB,IAA5BpP,OAAOD,KAAKoP,GAAKM,ODiDY,CAE9B,IAAIpE,EAAQ,KACqB,IAA7B,IAAIzF,IAAIyJ,GAAY7C,KACtBnB,EAAQgE,EAAW,GAEnB1M,QAAQC,MAAR,4CAAmDyM,IAGrD,IAAMK,EAAM1P,OAAOD,KAAKqP,GAAkBO,KAAK,KAczCvC,EAAM,0BAAsB/B,EAAtB,KAmBZ,OAhBE,cAAC,EAAD,CAAgB3B,YAdE,GAcwBD,WAfzB,GAejB,SACE,cAAC,GAAD,CACE6C,MAbM,KAcNsD,MClFL,UAAYC,eDmFPrK,KAAM4J,EACNU,OATS,OAUT1C,OAAQA,EAER1G,QAASnG,KAAKC,MAAMkG,QACpB2E,MAAOA,EACPR,aAActK,KAAKC,MAAMiF,SACzBiF,gBAAiBnK,KAAKC,MAAMkK,iBAJvBgF,IAP8DA,GAmBzE,OADA/M,QAAQC,MAAM,oBACP,Q,oBAKb,WACE,IAEImN,EAAc,KAKlB,OAPqBxP,KAAKC,MAAMyO,cAAczC,KAAO,IAInDuD,EAAc,cAAC,GAAD,CAAY9O,QAASV,KAAKC,MAAMwP,mBAAhC,oBAId,sBAAKhP,UAAWZ,KAAOqB,UAAvB,UACE,sBAAKT,UAAWZ,KAAO6P,OAAvB,UACE,cAAC,GAAD,CACE7B,SAAU7N,KAAKC,MAAM0P,gBACrB3K,QAAShF,KAAKC,MAAMuO,aACpBrO,SAAUH,KAAKC,MAAMkK,kBAEvB,qBAAK1J,UAAWZ,KAAO2P,YAAvB,SAAqCA,OAEvC,qBAAK/O,UAAWZ,KAAO+P,KAAvB,SAA8B5P,KAAK6P,iC,GA/GtBjP,IAAMC,W,oBE2DZiP,G,4JAnEb,WACE,IAAMlQ,EAAQI,KAAKC,MAAMuE,MAAQ3E,KAAO4E,eAAiB5E,KAAOqB,UAEhE,OACE,sBAAKT,UAAWb,EAAhB,UACE,qBAAKa,UAAWZ,KAAO0B,OAAvB,0BACA,sBAAKd,UAAWZ,KAAO8E,QAAvB,UACE,sHACA,2HACA,yHAKA,kEAEE,mBACEhC,KAAK,sEACLb,OAAO,SACPc,IAAI,sBAHN,6BAFF,QAUE,mBAAGD,KAAK,qDAAqDb,OAAO,SAASc,IAAI,sBAAjF,mCAVF,QAcE,mBAAGD,KAAK,wDAAwDb,OAAO,SAASc,IAAI,sBAApF,0CAdF,QAkBE,mBAAGD,KAAK,oCAAoCb,OAAO,SAASc,IAAI,sBAAhE,qBAlBF,QAsBE,mBACED,KAAK,yJACLb,OAAO,SACPc,IAAI,sBAHN,iDAtBF,cA8BE,mBACED,KAAK,gFACLb,OAAO,SACPc,IAAI,sBAHN,2CAQF,6G,GArDiBhC,IAAMC,WCkFlBkP,G,wKA7Eb,WAME,OAAO,cAAC,EAAD,CAAgBxO,OALR,eAKwBoD,QAJxB,qXAI4Cb,OAAO,M,yBAGpE,WAEE,OAAO,cAAC,EAAD,CAAgBU,OAAO,EAAMG,QADnB,0K,0BAInB,WACE,OACE,cAAC,GAAD,CACEqL,aAAchQ,KAAKC,MAAM+P,aACzBP,mBAAoBzP,KAAKC,MAAMgQ,WAC/BN,gBAAiB3P,KAAKC,MAAM0P,gBAC5BnB,aAAcxO,KAAKC,MAAMuO,aACzBC,cAAezO,KAAKC,MAAMwO,cAC1BC,cAAe1O,KAAKC,MAAMyO,cAC1BvE,gBAAiBnK,KAAKC,MAAMkK,gBAC5B+F,eAAgBlQ,KAAKC,MAAMiQ,eAC3B/J,QAASnG,KAAKC,MAAMkG,QACpBjB,SAAUlF,KAAKC,MAAMiF,a,oBAM3B,WAIE,OACE,sBAAKzE,UAAWZ,IAAO4C,QAAvB,UACE,qBAAKhC,UAAWZ,IAAO+E,MAAvB,SAA+B5E,KAAKmQ,gBACpC,qBAAK1P,UAAWZ,IAAOuQ,WAAYnR,GAAG,eAAtC,SACGe,KAAKqQ,iBAER,qBAAK5P,UAAWZ,IAAOyQ,aAAvB,SACE,cAAC,GAAD,MAEF,qBAAK7P,UAAWZ,IAAO0Q,QAAvB,SACE,cAAC,EAAD,CACExL,aAAc/E,KAAKC,MAAM8E,aACzBG,SAAUlF,KAAKC,MAAMiF,SACrBgD,OAfU,CAAC,QAAS,OAgBpBF,KAAM,GACN7B,QAASnG,KAAKC,MAAMkG,QACpBiE,SAAUpK,KAAKC,MAAMmK,SACrBoG,gBAAiBxQ,KAAKC,MAAMwQ,0B,GAtDjB7P,IAAMC,W,oBCgCd6P,G,4JAnCb,WACE,IAAM9Q,EAAQI,KAAKC,MAAMuE,MAAQ3E,KAAO4E,eAAiB5E,KAAOqB,UAEhE,OACE,sBAAKT,UAAWb,EAAhB,UACE,qBAAKa,UAAWZ,KAAO0B,OAAvB,8CACA,sBAAKd,UAAWZ,KAAO+E,MAAvB,kKAEyC,IACvC,mBACEjC,KAAK,sEACLb,OAAO,SACPc,IAAI,sBAHN,6BAHF,8CAYA,qBAAKnC,UAAWZ,KAAO8E,QAAvB,qX,GAnByB/D,IAAMC,W,oBCLxB,OAA0B,iECA1B,OAA0B,iECA1B,OAA0B,4DCA1B,OAA0B,sECA1B,OAA0B,8DCA1B,OAA0B,iECA1B,OAA0B,iECA1B,OAA0B,sECkL1B8P,G,kDA/Jb,WAAY1Q,GAAQ,IAAD,sBACjB,cAAMA,GAEN,IAAM2Q,EAAS,CACbC,IAAK,CACHC,WAAYC,GACZC,WAAYC,GACZC,MAAOC,GACPC,MAAOC,GACPC,UAAW,CACTR,WAAY,KACZE,WAAY,KACZE,MAAO,KACPE,MAAO,OAGXG,IAAK,CACHC,QAASC,GACTX,WAAYY,GACZR,MAAOS,GACPX,WAAYY,GACZN,UAAW,CACTE,QAAS,KACTV,WAAY,KACZI,MAAO,KACPF,WAAY,QAzBD,OA8BjB,EAAKa,SAAW,EAAKA,SAASjQ,KAAd,gBAChB,EAAKkQ,WAAa,EAAKA,WAAWlQ,KAAhB,gBAClB,EAAK6G,MAAQ,CAAEmI,OAAQA,EAAQmB,eAAgB,QAAS5H,gBAAiB,OAhCxD,E,4CAmCnB,SAAS9K,GACP,IAAMuL,EAAOvL,EAAEyC,OAAOC,QAAQC,aACxBgQ,EAAUhS,KAAKyI,MAAM0B,gBACtBnK,KAAKyI,MAAMmI,OAAOoB,GAAS9P,eAAe0I,GAK/C5K,KAAKuJ,SAAS,CAAEwI,eAAgBnH,IAJ9BxI,QAAQC,MAAR,2B,wBAOJ,SAAWhD,GAET,IAAM2S,EAAU3S,EAAEyC,OAAOmQ,UACpBjS,KAAKyI,MAAMmI,OAAO1O,eAAe8P,GAKtChS,KAAKuJ,SAAS,CAAEY,gBAAiB6H,EAASD,eAAgB,UAJxD3P,QAAQC,MAAR,2B,oBAOJ,WACE,IADO,EACD0P,EAAiB/R,KAAKyI,MAAMsJ,eAC5B5H,EAAkBnK,KAAKyI,MAAM0B,gBAE7B+H,EAAiBlS,KAAKyI,MAAMmI,OAAOzG,GAErCgI,EAAgB,GACd9R,EAAe,CAAEgB,SAAU,SAP1B,eASW5B,OAAOD,KAAK0S,GAAgBE,QATvC,IASP,2BAAsD,CAAC,IAA5CjD,EAA2C,QACpD,GAAY,cAARA,EAAJ,CAEA,IAAIpP,EAAU,OACVoP,IAAQ4C,IACVhS,EAAU,YAGZ,IAAMoO,EACJ,cAAC,EAAD,CAAsB7N,aAAc6O,EAAK9O,aAAcA,EAAcN,QAASA,EAASW,QAASV,KAAK6R,SAArG,SACG1C,GADcA,GAKnBgD,EAAclL,KAAKkH,KAvBd,8BA2BP,IADA,IAAIkE,EAAiB,GACrB,MAAkB5S,OAAOD,KAAKQ,KAAKyI,MAAMmI,QAAzC,eAAkD,CAA7C,IAAMzB,EAAG,KACRpP,EAAU,OACVoP,IAAQhF,IACVpK,EAAU,mBAGZ,IAAImO,EAAQ,KACA,QAARiB,EACFjB,EACE,uBAAM5N,aAAc6O,EAApB,eACI,uCAGW,QAARA,EACTjB,EACE,uBAAM5N,aAAc6O,EAApB,eACI,uCAIN/M,QAAQC,MAAM,oBAGhB,IAAM8L,EACJ,cAAC,EAAD,CAEEpO,QAASA,EACTO,aAAc6O,EACd9O,aAAcA,EACdK,QAASV,KAAK8R,WALhB,SAOG5D,GANIiB,GAUTkD,EAAepL,KAAKkH,GAGtB,IAAMmE,EAAiBtS,KAAKyI,MAAMmI,OAAO5Q,KAAKyI,MAAM0B,iBAAiBnK,KAAKyI,MAAMsJ,gBAG1E1K,EAAgB,CACpB,CAAC,kBAAmB,oBACpB,CAAC,mBAAoB,oBAKjBkL,EAAkB,CAFJlL,EAAc,GAAG,IAAMA,EAAc,GAAG,GAAKA,EAAc,GAAG,IAAM,EACpEA,EAAc,GAAG,IAAMA,EAAc,GAAG,GAAKA,EAAc,GAAG,IAAM,GAKxF,OACE,sBAAK5G,UAAWZ,KAAOqB,UAAvB,UACE,qBAAKT,UAAWZ,KAAO2B,KAAvB,SAJe,wEAKf,qBAAKf,UAAWZ,KAAO+P,KAAvB,SACE,cAAC,EAAD,CAAY1H,OAAQqK,EAAiBvK,KAAM,EAAGX,cAAeA,EAAeD,WAAYkL,MAE1F,sBAAK7R,UAAWZ,KAAOiO,QAAvB,UACE,qBAAKrN,UAAWZ,KAAOwS,eAAvB,SAAwCA,IACxC,qBAAK5R,UAAWZ,KAAOsS,cAAvB,SAAuCA,c,GAjJtBvR,IAAMC,WClBlB,OAA0B,oDCA1B,OAA0B,8CCA1B,OAA0B,yDCkG1B2R,G,wKAnFb,WAGE,OACE,cAAC,GAAD,CACEC,QAAS,oBACTlQ,WALoB,YAMpBmQ,SALe,0E,sCAUrB,WAME,OAAO,cAAC,EAAD,CAAgBlO,OAAO,EAAMjD,OALrB,YAKqCqD,MAJzC,sKAIuDD,QAHxD,ogB,uCAMZ,WAKE,OAAO,cAAC,EAAD,CAAgBpD,OAJR,oCAIwBqD,MAH7B,iU,kCAMZ,WAUE,OAAO,cAAC,EAAD,CAAgBrD,OATR,wCASwBqD,MAR7B,qe,oBAWZ,WACE,OACE,sBAAKnE,UAAWZ,IAAO8S,iBAAvB,UACE,qBAAKlS,UAAWZ,IAAO+S,aAAvB,SAAsC5S,KAAK6S,uBAC3C,qBAAKpS,UAAWZ,IAAOiT,mBAAvB,SAA4C9S,KAAK+S,6BACjD,qBAAKtS,UAAWZ,IAAOmT,oBAAvB,SAA6ChT,KAAKiT,yBAClD,qBAAKxS,UAAWZ,IAAOqT,gBAAvB,SACE,qBAAKlS,IAAKmS,GAAoBlS,IAAI,kDAEpC,qBAAKR,UAAWZ,IAAOuT,oBAAvB,SAA6CpT,KAAKqT,8BAClD,qBAAK5S,UAAWZ,IAAOyT,iBAAvB,SACE,qBAAKtS,IAAKuS,GAAetS,IAAI,qCAE/B,qBAAKR,UAAWZ,IAAO2T,mBAAvB,SACE,cAAC,GAAD,MAEF,sBAAK/S,UAAWZ,IAAO4T,eAAvB,UACE,qBAAKzS,IAAK0S,GAAqBzS,IAAI,0BACnC,sBAAKR,UAAWZ,IAAO8T,SAAvB,wCAEE,mBACEhR,KAAK,qGACLb,OAAO,SACPc,IAAI,sBAHN,mFAFF,4B,GA7DchC,IAAMC,W,sCC2Wf+S,G,kDAhWb,WAAY3T,GAAQ,IAAD,uBACjB,cAAMA,IAEDwI,MAAQ,CACXpG,MAAO,KACPwR,UAAU,EACVC,aAAa,EACbxI,aAAc,EACdmD,cAAe,GACfsF,SAAU,GACVvF,aAAc,GACdwF,eAAe,EACfC,gBAAgB,EAChBC,aAAa,EACbjR,QAAS,KACTkR,SAAU,YACVC,WAAY,YACZjO,QAAS,IAKX,IAAMkO,EAAiB5U,OAAOD,KAAK8U,IAAiB,GAC9CpE,EAAiBzQ,OAAOD,KAAK8U,GAAgBD,IAAiBjC,OAAO,GACrEmC,EAAc9U,OAAOD,KAAK8U,GAAgBD,GAAgBnE,IAAiBkC,OAAO,GAxBvE,OA0BjB,EAAK3J,MAAMyH,eAAiBA,EAC5B,EAAKzH,MAAM8L,YAAcA,EACzB,EAAK9L,MAAMiG,cAAgB,IAAIrJ,IAAI,CAACkP,IACpC,EAAK9L,MAAM0B,gBAAkB+F,EAG7B,EAAKsE,gBAGL,EAAKxE,aAAe,EAAKA,aAAapO,KAAlB,gBAEpB,EAAKmD,aAAe,EAAKA,aAAanD,KAAlB,gBACpB,EAAKR,cAAgB,EAAKA,cAAcQ,KAAnB,gBACrB,EAAKO,WAAa,EAAKA,WAAWP,KAAhB,gBAClB,EAAK+N,gBAAkB,EAAKA,gBAAgB/N,KAArB,gBACvB,EAAKqO,WAAa,EAAKA,WAAWrO,KAAhB,gBAClB,EAAK6S,cAAgB,EAAKA,cAAc7S,KAAnB,gBACrB,EAAK6O,eAAiB,EAAKA,eAAe7O,KAApB,gBA3CL,E,iDA8CnB,WAIE,IAHA,IAAM8S,EjBdH,WAEL,IAAIC,EAAW,GAEf,IACE,IAAMC,EAAeC,MACfC,EAAQF,EAAapV,OAE3B,GAAqB,IAAjBsV,EAAM5F,OACR,MAAM,IAAI5P,MAAM,wBALhB,qBAQiBwV,GARjB,IAQF,2BAA0B,CAAC,IAAhBC,EAAe,QAElBC,EAAW7Q,OAAO4Q,GAAMjR,MAAM,MAAM,GACpCmR,EAAgB9Q,OAAO6Q,GAAUlR,MAAM,KAAK,GAAGM,cAEjD6Q,EAAc/F,OAAS,EACvB9M,QAAQ6M,IAAI,qDAIhB0F,EAASM,GAAiBL,EAAaG,GAAb,SAlB1B,+BAoBF,MAAO1S,GACPD,QAAQC,MAAR,yCAAgDA,IAElD,OAAOsS,EiBbcO,GAEf9K,EAAW,GACf,MAAmB3K,OAAOD,KAAK2V,IAA/B,eAA8C,CAAzC,IAAMxP,EAAI,KACb,IACEyE,EAASzE,GAAQ,GACjByE,EAASzE,GAAT,MAA0B+O,EAAW/O,GACrCyE,EAASzE,GAAT,YAAgCwP,GAAaxP,GAAb,YAChC,MAAOtD,GACPD,QAAQ6M,IAAI5M,IAMhBrC,KAAKyI,MAAMkM,SAAWvK,I,0BAIxB,SAAagL,GACX,IAAMC,EAAYlR,OAAOiR,GAAcE,cAGnC5G,EAAgB6G,oBAAUvV,KAAKyI,MAAMiG,eAErCA,EAAc7I,IAAIwP,GACpB3G,EAAc8G,OAAOH,GAErB3G,EAAcxH,IAAImO,GAOpB,IAFA,IAAI7G,EAAe+G,oBAAUvV,KAAKyI,MAAM+F,cAExC,MAAqC/O,OAAO+F,QAAQgJ,GAApD,eACE,IADkE,IAAD,sBAAvDwD,EAAuD,KAA9CzM,EAA8C,KACjE,MAAqC9F,OAAO+F,QAAQD,GAApD,eACE,IADiE,IAAD,sBAAtDE,EAAsD,KAA7CC,EAA6C,KAChE,MAAiCjG,OAAO+F,QAAQE,GAAhD,eAEE,IAF6D,IAAD,sBAAlDC,EAAkD,KAA5C0E,EAA4C,KACtDzE,EAAQ8I,EAAc7I,IAAIF,GAChC,MAAsBlG,OAAOD,KAAK6K,GAAlC,eAA+C,CAA1C,IAAMoL,EAAO,KAChBjH,EAAawD,GAASvM,GAASE,GAAM8P,GAAW7P,EAMxD5F,KAAKuJ,SAAS,CAAEiF,aAAcA,EAAcE,cAAeA,M,wBAG7D,WACE1O,KAAKuJ,SAAS,CAAEmF,cAAe,IAAIrJ,Q,6BAGrC,SAAgB2M,GACd,IAAM0D,EAAe1D,EAAQsD,cAC7BtV,KAAKuJ,SAAS,CAAEY,gBAAiBuL,M,2BAGnC,WACE1V,KAAKuJ,SAAS,CAAE2K,aAAclU,KAAKyI,MAAMyL,gB,wBAG3C,SAAWjR,GACTjD,KAAKuJ,SAAS,CAAE2K,aAAa,EAAMjR,QAASA,M,2BAG9C,WACEjD,KAAKuJ,SAAS,CAAEuK,aAAc9T,KAAKyI,MAAMqL,gB,yBAG3C,SAAY6B,GAGV,IAAI5B,EAAW,GACXtF,EAAgB,GAChBvJ,EAAW,GAGTqP,EADKvU,KAAKyI,MAAMiG,cAAcpJ,SACXsQ,OAAOhQ,MAE5BiQ,EAAc,GAElB,IACE,cAAqCpW,OAAO+F,QAAQmQ,GAApD,eAA8D,CAAC,IAAD,sBAAlDlQ,EAAkD,KAAzCC,EAAyC,KAC5DmQ,EAAYpQ,GAAW,GACvB,cAAqChG,OAAO+F,QAAQE,GAApD,eACE,IADiE,IAAD,sBAAtDsM,EAAsD,KAA7CzM,EAA6C,KAChE,MAA8B9F,OAAO+F,QAAQD,GAA7C,eAA2D,CAAC,IAAD,sBAA/CI,EAA+C,KAAzCmQ,EAAyC,KACzDD,EAAYpQ,GAASE,GAAQ,KAI7B,IAFA,IAAMoQ,EAAepQ,IAAS4O,EAE9B,MAA8B9U,OAAO+F,QAAQsQ,GAA7C,eAAuD,CAAC,IAAD,sBAA3CL,EAA2C,KAAlCxQ,EAAkC,KAErD,GAAgB,SAAZwQ,EAAoB,CAGtB,IAAMC,EAAe1D,EAAQsD,cAG7BtG,cAAI+E,EAAD,UAAc/B,EAAd,YAAyBvM,EAAzB,YAAoCE,EAApC,YAA4C+P,GAAgBK,GAI/D,IAAMC,EAAiB/Q,EAAKyQ,GAMtBO,EAAY,CAChBC,SANmBzW,OAAOD,KAAKwW,GACHlX,KAAI,SAACqX,GAAD,OAAO,IAAI3K,KAAKC,SAAS0K,OAMzDC,SAJe3W,OAAO6F,OAAO0Q,IAO/BhH,cAAIP,EAAD,UAAmBuD,EAAnB,YAA8BvM,EAA9B,YAAyCE,EAAzC,YAAiD+P,GAAgBO,OAC/C,aAAZR,GACTzG,cAAI9J,EAAD,UAAc8M,EAAd,YAAyBvM,EAAzB,YAAoCE,GAAQV,MAMzD,MAAO5C,GACPD,QAAQC,MAAM,uBAAwBA,GA0BxC,IAjBA,IAAMgU,EAAmB,CAGvB,CAAC,UAAW,WACZ,CAAC,UAAW,YASVC,EAAY,EACZC,EAAe,EACfC,EAAc,GAElB,MAAuC/W,OAAO+F,QAAQqQ,GAAtD,eAAoE,CAIlE,IAJmE,IAAD,sBAAxDpQ,EAAwD,KAA/CgR,EAA+C,KAC5DC,EAASjX,OAAOD,KAAKiX,GAAevH,OACpCyH,EAAYN,EAAiBE,GAC7BK,EAAWC,KAAOC,MAAMH,GAAWzL,KAAK,OAAO6L,OAAOL,GAC5D,MAAmBjX,OAAOD,KAAKiX,GAA/B,eAA+C,CAA1C,IAAM9Q,EAAI,KACPqR,EAAaJ,EAASN,GAC5BtH,cAAIwH,EAAD,UAAiB/Q,EAAjB,YAA4BE,GAAQqR,GACvCV,IAEFC,IACAD,EAAY,EAMdtW,KAAKyI,MAAMtC,QAAUqQ,EACrBxW,KAAKyI,MAAMgG,cAAgBA,EAC3BzO,KAAKyI,MAAM+F,aAAeuF,EAC1B/T,KAAKyI,MAAMvD,SAAWA,EACtBlF,KAAKyI,MAAMoL,UAAW,I,0BAIxB,SAAaE,GACX/T,KAAKuJ,SAAS,CAAEiF,aAAcuF,M,+BAGhC,WAAqB,IAAD,OAElBkD,MADe,oFAEZC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACC,EAAKC,YAAYD,GACjB,EAAK9N,SAAS,CACZsK,UAAU,OAGd,SAACxR,GACC,EAAKkH,SAAS,CACZsK,UAAU,EACVxR,e,yBAOV,WACE,cAAsB5C,OAAO6F,OAAOtF,KAAKyI,MAAM+F,cAA/C,eACE,IADG,IAAM+I,EAAO,KAChB,MAAoB9X,OAAO6F,OAAOiS,GAAlC,eAA4C,CAC1C,IAAc,IADA,KAEZ,OAAO,EAKb,OAAO,I,4BAGT,SAAelY,GACb,IAAMmY,EAAWrT,OAAO9E,EAAEyC,OAAOC,QAAQC,cAAcoC,cACjDuQ,EAAW3U,KAAKyI,MAAMkM,SAAS6C,GAE/BC,EAAW9C,EAAQ,YACnB5T,EAAQ4T,EAAQ,MAChB1T,EAAG,mBAAeuW,GAElBvU,EACJ,cAAC,EAAD,CAAS1B,OAAQiW,EAAU/V,KAAMgW,EAAUxW,IAAKA,EAAKF,MAAOA,EAAOK,cAAepB,KAAKoB,gBAGzFpB,KAAKoB,gBACLpB,KAAKmC,WAAWc,K,oBAGlB,WAAU,IAAD,EACmBjD,KAAKyI,MAAzBpG,EADC,EACDA,MAAOwR,EADN,EACMA,SAET5Q,EAAU,KACVjD,KAAKyI,MAAMyL,cACbjR,EAAU,cAACyU,EAAD,CAAkBtW,cAAepB,KAAKoB,cAAtC,SAAsDpB,KAAKyI,MAAMxF,WAG7E,IAAI0U,EAAoB,GAKxB,OAJI3X,KAAKyI,MAAMqL,cACb6D,EAAoB,CAAEC,UAAW,oBAG/BvV,EACK,0CAAaA,EAAMwV,WAChBhE,EAIR,cAAC,IAAD,UACE,sBAAKpT,UAAWZ,IAAOiY,cAAvB,UACE,qBAAKrX,UAAWZ,IAAO0B,OAAvB,SACE,qBAAKd,UAAWZ,IAAOkY,SAAvB,SACE,cAAC,EAAD,CAAYhY,QAAQ,QAAQM,aAAc,CAAEgB,SAAU,SAAWX,QAASV,KAAKyU,cAA/E,wBAKJ,uBAAOhU,UAAWZ,IAAOmY,QAASpY,MAAO+X,EAAzC,SACE,eAAC,EAAD,CACEvD,WAAYpU,KAAKyI,MAAM2L,WACvBjS,WAAYnC,KAAKmC,WACjBf,cAAepB,KAAKoB,cACpBkB,WAAYtC,KAAKyU,cAJnB,UAME,cAAC,IAAD,CAAMwD,GAAG,IAAIxX,UAAWZ,IAAOqY,QAA/B,uBAGA,cAAC,IAAD,CAAMD,GAAG,aAAaxX,UAAWZ,IAAOqY,QAAxC,uBAGA,cAAC,IAAD,CAAMD,GAAG,OAAOxX,UAAWZ,IAAOqY,QAAlC,sBAKJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAOnD,KAAK,aAAZ,SACE,cAAC,GAAD,CAAWpF,gBAAiB3P,KAAK2P,oBAEnC,cAAC,IAAD,CAAOoF,KAAK,OAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,GAAD,CACE/E,aAAchQ,KAAKgQ,aACnBC,WAAYjQ,KAAKiQ,WACjBN,gBAAiB3P,KAAK2P,gBACtB5K,aAAc/E,KAAK+E,aACnByJ,aAAcxO,KAAKyI,MAAM+F,aACzBC,cAAezO,KAAKyI,MAAMgG,cAC1BC,cAAe1O,KAAKyI,MAAMiG,cAC1BvE,gBAAiBnK,KAAKyI,MAAM0B,gBAC5B+F,eAAgBlQ,KAAKyI,MAAMyH,eAC3B/J,QAASnG,KAAKyI,MAAMtC,QACpBsK,eAAgBzQ,KAAKyI,MAAMgI,eAE3BvL,SAAUlF,KAAKyI,MAAMvD,gBAI1BjC,OAvDA,yD,GAlSWrC,IAAMC,WCZfsX,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEF7P,SAASC,eAAe,SAM1BkP,O","file":"static/js/main.353a4675.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridContainer\":\"Dashboard_gridContainer__3yF3d\",\"menuIcon\":\"Dashboard_menuIcon__3csbN\",\"header\":\"Dashboard_header__3EVTH\",\"header__search\":\"Dashboard_header__search__3WEkM\",\"sidebar\":\"Dashboard_sidebar__gkV4P\",\"active\":\"Dashboard_active__OXmJb\",\"intro\":\"Dashboard_intro__sxDv4\",\"timeseries\":\"Dashboard_timeseries__bc767\",\"mapExplainer\":\"Dashboard_mapExplainer__2uEi3\",\"siteMap\":\"Dashboard_siteMap__1ZSFS\",\"contentCards\":\"Dashboard_contentCards__JEb3x\",\"card\":\"Dashboard_card__8pLoL\",\"content\":\"Dashboard_content__3MNh4\",\"explainerContent\":\"Dashboard_explainerContent__4M6dR\",\"faqContent\":\"Dashboard_faqContent__87qYX\",\"navLink\":\"Dashboard_navLink__YKRWN\",\"sidebarCloseIcon\":\"Dashboard_sidebarCloseIcon__BCzNC\",\"observations\":\"Dashboard_observations__3OAeF\",\"emissionsMap\":\"Dashboard_emissionsMap__1eXms\",\"emissionsExplainer\":\"Dashboard_emissionsExplainer__3u17n\",\"modelMap\":\"Dashboard_modelMap__3Y8Gl\",\"modelExplainer\":\"Dashboard_modelExplainer__OgXT0\",\"dispersionExplainer\":\"Dashboard_dispersionExplainer__4ZV_f\",\"dispersionImage\":\"Dashboard_dispersionImage__3nFkg\",\"comparisonExplainer\":\"Dashboard_comparisonExplainer__39EXW\",\"estimatesExplainer\":\"Dashboard_estimatesExplainer__UzCCG\",\"estimatesImage\":\"Dashboard_estimatesImage__2nHcj\",\"modelImprovement\":\"Dashboard_modelImprovement__3NRA0\",\"linkType\":\"Dashboard_linkType__yzWlQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ControlPanel_container__Z5LXb\",\"header\":\"ControlPanel_header__1QsP1\",\"headerText\":\"ControlPanel_headerText__1vciO\",\"headerTag\":\"ControlPanel_headerTag__2tt5R\",\"closeButton\":\"ControlPanel_closeButton__RQ363\",\"content\":\"ControlPanel_content__1T_qo\",\"mainHeader\":\"ControlPanel_mainHeader__61ljS\",\"footer\":\"ControlPanel_footer__18lR5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Overlay_container__1vSxV\",\"closeButton\":\"Overlay_closeButton__3MN4p\",\"textContainer\":\"Overlay_textContainer__31kHq\",\"header\":\"Overlay_header__3Spl-\",\"intro\":\"Overlay_intro__16uuf\",\"introBody\":\"Overlay_introBody__3lcEP\",\"sectionHeader\":\"Overlay_sectionHeader__3_ef6\",\"body\":\"Overlay_body__33ep2\",\"image\":\"Overlay_image__2setc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"EmissionsBox_container__2QPxG\",\"body\":\"EmissionsBox_body__2tR7d\",\"plot\":\"EmissionsBox_plot__12nyU\",\"buttons\":\"EmissionsBox_buttons__3KgbA\",\"speciesButtons\":\"EmissionsBox_speciesButtons__2Vaxj\",\"sectorButtons\":\"EmissionsBox_sectorButtons__2rkJ9\",\"cbar\":\"EmissionsBox_cbar__36Qa-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"light\":\"TextButton_light__1jxPb\",\"dark\":\"TextButton_dark__1GvSv\",\"selected\":\"TextButton_selected__31_W7\",\"speciesSelected\":\"TextButton_speciesSelected__1P9FX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemContainer\":\"QnA_itemContainer__GR59v\",\"questionContainer\":\"QnA_questionContainer__4P1rw\",\"questionText\":\"QnA_questionText__3wMaY\",\"questionNumber\":\"QnA_questionNumber__2Z3SY\",\"answer\":\"QnA_answer__1lt0C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ExplanationBox_container__i-IyG\",\"containerNoGap\":\"ExplanationBox_containerNoGap__CeLP-\",\"header\":\"ExplanationBox_header__3mfAI\",\"intro\":\"ExplanationBox_intro__1cp6p\",\"explain\":\"ExplanationBox_explain__2Ephi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ObsBox_container__2zyOS\",\"header\":\"ObsBox_header__2XPQM\",\"body\":\"ObsBox_body__3UYdI\",\"select\":\"ObsBox_select__1H0NV\",\"clearButton\":\"ObsBox_clearButton__2JtfE\",\"plot\":\"ObsBox_plot__2_FUN\",\"emptyMessage\":\"ObsBox_emptyMessage__2wUYn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"EstimatesExplainer_container__x6F5D\",\"containerNoGap\":\"EstimatesExplainer_containerNoGap__12sf4\",\"header\":\"EstimatesExplainer_header__2SF29\",\"intro\":\"EstimatesExplainer_intro__3lFJn\",\"explain\":\"EstimatesExplainer_explain__cY0Wp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LeafletMap_container__U80i5\",\"marker\":\"LeafletMap_marker__3ZCgD\",\"markerHeader\":\"LeafletMap_markerHeader__2sTlO\",\"markerBody\":\"LeafletMap_markerBody__1hyES\",\"markerLocation\":\"LeafletMap_markerLocation__3fFsm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ObsExplainer_container__3DMc4\",\"containerNoGap\":\"ObsExplainer_containerNoGap__3ExOl\",\"header\":\"ObsExplainer_header__1QDwy\",\"explain\":\"ObsExplainer_explain__3ofnW\",\"li\":\"ObsExplainer_li__2E1e5\",\"menu-item\":\"ObsExplainer_menu-item__2gcls\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"OverlayContainer_overlay__2ueMV\",\"overlayNoBackground\":\"OverlayContainer_overlayNoBackground__1w-kN\",\"container\":\"OverlayContainer_container__1N_zM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"FAQ_main__3196L\",\"content\":\"FAQ_content__3HpAj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MultiSiteLineChart_container__XNgtu\",\"x-axis\":\"MultiSiteLineChart_x-axis__uI3a9\",\"y-axis\":\"MultiSiteLineChart_y-axis__33ZzG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"RadioButtons_buttons__3oMeK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"niceButton\":\"NiceButton_niceButton__3CCzF\"};","var map = {\n\t\"./BTT.jpg\": 72,\n\t\"./NPL.jpg\": 73,\n\t\"./TMB.jpg\": 74\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 71;","export default __webpack_public_path__ + \"static/media/BTT.611f21ae.jpg\";","export default __webpack_public_path__ + \"static/media/NPL.611f21ae.jpg\";","export default __webpack_public_path__ + \"static/media/TMB.611f21ae.jpg\";","export default __webpack_public_path__ + \"static/media/OpenGHG_Logo_Portrait.c51170ed.svg\";","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport styles from \"./TextButton.module.css\";\n\nclass TextButton extends React.Component {\n  render() {\n    let style = styles.light;\n    const styling = this.props.styling;\n    if (styling === \"dark\") {\n      style = styles.dark;\n    } else if (styling === \"selected\") {\n      style = styles.selected;\n    } else if (styling === \"speciesSelected\") {\n      style = styles.speciesSelected;\n    }\n\n    // Shoehorn another way of doing this in\n    if(this.props.selected) {\n      style = styles.dark;\n    }\n\n    const extraStyling = this.props.extraStyling ? this.props.extraStyling : {};\n    const onClickParam = this.props.onClickParam;\n\n    return (\n      <button\n        type=\"button\"\n        data-onclickparam={onClickParam}\n        className={style}\n        style={extraStyling}\n        onClick={this.props.onClick}\n      >\n        {this.props.children}\n      </button>\n    );\n  }\n}\n\nTextButton.propTypes = {\n  children: PropTypes.string.isRequired,\n  extraStyling: PropTypes.object,\n  onClick: PropTypes.func.isRequired,\n  onClickParam: PropTypes.string,\n  selected: PropTypes.bool,\n  styling: PropTypes.string\n};\n\nexport default TextButton;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport TextButton from \"../TextButton/TextButton\";\n\nimport styles from \"./Overlay.module.css\";\n\nclass Overlay extends React.Component {\n  render() {\n    let image = null;\n    if (this.props.image) {\n      image = <img src={this.props.image} alt={this.props.alt} />;\n    }\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.closeButton}>\n          <TextButton onClick={this.props.toggleOverlay} styling={\"dark\"} extraStyling={{ fontSize: \"1.5vw\" }}>\n            x\n          </TextButton>\n        </div>\n        <div className={styles.textContainer}>\n          <div className={styles.header}>{this.props.header}</div>\n          <div className={styles.body}>{this.props.text}</div>\n        </div>\n        <div className={styles.image}>{image}</div>\n      </div>\n    );\n  }\n}\n\nOverlay.propTypes = {\n  alt: PropTypes.string,\n  image: PropTypes.object,\n  text: PropTypes.string,\n  toggleOverlay: PropTypes.func.isRequired,\n};\n\nexport default Overlay;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport styles from \"./ControlPanel.module.css\";\n\nimport textData from \"../../data/overlayText.json\";\n\nimport OpenGHGLogo from \"../../images/OpenGHG_Logo_Portrait.svg\";\nimport Overlay from \"../Overlay/Overlay\";\nimport TextButton from \"../TextButton/TextButton\";\n\nclass ControlPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.createOverlay = this.createOverlay.bind(this);\n  }\n\n  createOverlay(e) {\n    const area = e.target.dataset.onclickparam;\n\n    if (!textData.hasOwnProperty(area)) {\n      console.error(`No data for $(area) in overlayText`);\n      return;\n    }\n\n    const text = textData[area];\n    this.props.toggleOverlay();\n    this.props.setOverlay(<Overlay text={text} toggleOverlay={this.props.toggleOverlay} />);\n  }\n\n  render() {\n    return (\n      <div className={styles.container}>\n        <div className={styles.closeButton}>\n          <TextButton styling=\"light\" extraStyling={{ fontSize: \"2em\" }} onClick={this.props.closePanel}>\n            x\n          </TextButton>\n        </div>\n        <div className={styles.header}>\n          <div className={styles.headerText}>Greenhouse gas data dashboard</div>\n          <div className={styles.headerTag}>by OpenGHG</div>\n        </div>\n        <div className={styles.content}>{this.props.children}</div>\n        <div className={styles.footer}>\n          <a href=\"https://github.com/openghg/dashboard\" rel=\"noreferrer\" target=\"_blank\">\n            <img src={OpenGHGLogo} alt=\"OpenGHG Logo\" />\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nControlPanel.propTypes = {\n  closePanel: PropTypes.func.isRequired,\n  layoutMode: PropTypes.string.isRequired,\n  setMode: PropTypes.func,\n  setOverlay: PropTypes.func.isRequired,\n  toggleOverlay: PropTypes.func.isRequired,\n};\n\nexport default ControlPanel;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport styles from \"./OverlayContainer.module.css\";\n\n// Based on https://stackoverflow.com/a/55003301\nfunction Overlay(props) {\n  const { useState } = React;\n  const [open, setOpen] = useState(true);\n  if (open) {\n    let style = styles.overlay;\n\n    if (!props.useBackground) {\n      style = styles.overlayNoBackground;\n    }\n\n    return (\n      <div\n        data-testid=\"overlay\"\n        className={style}\n        onClick={() => {\n          props.toggleOverlay();\n          setOpen(false);\n        }}\n      >\n        <div\n          onClick={(e) => {\n            e.stopPropagation();\n          }}\n        >\n          {props.children}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\n\nOverlay.defaultProps = {\n  useBackground: true,\n};\n\nexport default Overlay;\n\nOverlay.propTypes = {\n  toggleOverlay: PropTypes.func.isRequired,\n  children: PropTypes.element.isRequired,\n  useBackground: PropTypes.bool,\n};\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport styles from \"./QnA.module.css\";\n\nclass QnA extends React.Component {\n  render() {\n    const questionNumber = this.props.number;\n    const questionText = this.props.question;\n\n    let answerText = this.props.answer;\n    const split = this.props.split;\n\n    if (answerText && split === true) {\n      const splitText = answerText.split(\"\\n\").map((i) => {\n        return <p>{i}</p>;\n      });\n\n      answerText = splitText;\n    }\n\n    let question = (\n      <div className={styles.itemContainer}>\n        <div className={styles.questionContainer}>\n          <div className={styles.questionNumber}>{String(questionNumber).toUpperCase()}</div>\n          <div className={styles.questionText}>{questionText}</div>\n        </div>\n        <div className={styles.answer}>{answerText}</div>\n      </div>\n    );\n\n    return question;\n  }\n}\n\nQnA.propTypes = {\n  answer: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  question: PropTypes.string.isRequired,\n};\n\nexport default QnA;\n","import React from \"react\";\n\nimport QnA from \"../QnA/QnA\";\nimport styles from \"./FAQ.module.css\";\n\nclass FAQ extends React.Component {\n  render() {\n    const Q1 = \"What determines the concentration of greenhouse gases in the atmosphere?\";\n    const A1 = `Greenhouse gas concentrations are influenced by emissions and meteorology. \n    The concentration at a particular point in time will depend on the the background concentration, \n    the magnitude of the emissions upwind of the sensor, the wind speed, and the amount of mixing that \n    the gas experiences in the atmosphere. Greenhouse gas concentrations change continuously because \n    each of these factors, and the wind direction, change continuously.`;\n\n    const Q2 = \"What causes the amount of mixing in the atmosphere to change?\";\n    const A2 = `Mixing of greenhouse gases is driven by turbulence. You experience this turbulence every day as gusts of wind.\\n\n    - Turbulence tends to be high when winds are strong or when the surface is warm compared to the air higher up in the atmosphere (e.g., on a sunny day, the sun warms the ground more than the air).\\n \n    - Turbulence is weaker when the wind speed is low, or when the ground is cooler than the air (e.g., during a clear night).\\n\n    During periods of strong turbulence, gases are mixed away from the surface more rapidly than during times with low turbulence, or vice versa. Therefore, when the turbulence is strong and gases are mixed more rapidly, concentrations tend to be lower.`;\n\n    const Q3 = \"Why do the concentrations increase at night-time?\";\n    const A3 = `It may seem counter-intitive that concentrations tend to be high during the night, when we \n    might expect emissions to be low. However, as explained in Questions 1 and 2, concentrations are influenced by both \n    emissions and meteorology. Typically, at nighttime, atmospheric mixing tends to be weaker, because \n    radiation from the sun is not warming the ground and generating turbulence. Therefore, gases tend to hang around near the surface, \n    close to where they are emitted, and concentrations tend to build up in the lower atmosphere. This effect tends to \n    overwhelm any emissions change, particularly on clear days.`;\n\n    const Q4 = \"What does the minimum concentration indicate?\";\n    const A4 = `During periods of strong winds and/or strong mixing, concentrations will tend toward some \n    minimum value, particularly at more remote or coastal locations. This concentration is often referred to as the 'background' or \n    'baseline'. It represents the concentration in the remote atmosphere, far from pollution sources. \n    In the UK, baseline concentrations are typically observed when the wind is blowing from the Atlantic to the west. Baseline concentrations\n     represent the total accumulation of greenhouse gases that has occurred over decades. For carbon dioxide and methane, \n     the baseline value measured in the UK is currently increasing each year.`;\n\n    const Q5 = \"What causes the 'spikes' in the measurements?\";\n    const A5 = `The spikes, or 'pollution events' seen overlaying the measurements are caused by plumes of \n    gas passing over the sensor. These plumes could be due to nearby sources such as cars or chimneys. But more \n    prolongued pollution events are seen when air reaches the measurement site from more industrialised countries or regions.`;\n\n    const Q6 = \"How are these data used to infer emissions?\";\n    const A6 = `As discussed above, the concentration measurements\n     are influenced by emissions and meteorology. \n    Therefore, in order to infer greenhouse gas emissions from the concentration data, we need to account for the influence of \n    meteorology. This can be done by using computer models that simulate the dispersion of greenhouse \n    gases in the atmosphere. These models use meteorological data from weather forecasting centres such as the Met Office, to estimate how\n    a gas would be transported through the atmosphere. The model can be compared to the data, and the emissions adjusted if differences are found.`;\n\n    const Q7 = \"Are atmospheric measurements used in greenhouse gas reporting?\";\n    const A7 = `At present, it is not a requirement for countries to use greenhouse gas observations in their \n    greenhouse gas reports. Instead, countries are required only to use 'inventory' methods, based on economic data. However,\n    the UK and a small number of other countries have begun submitting emissions derived from atmospheric measurements \n    along with their inventory estimates. These 'top-down' estimates are used to identify potential areas where the inventory could be improved.`;\n\n    const Q8 = \"Can greenhouse gases be measured from space?\";\n    const A8 = `Yes, there are several missions that can now measure carbon dioxide and methane concentrations \n    from space. These measurements are complementary to the ground-based data, because satellites can 'see' larger areas than the \n    in situ networks. However, there are some limitations at present, because they cannot \n    measure during the night, during cloudy conditions, and the measurements tend to be lower precision. Furthermore, there are many\n    lower-abundance greenhouse gases that would be difficult to measure for the lower atmosphere from space (e.g. HFCs). \n    In future, greenhouse gas observing systems will likely rely on both space-based and ground-based data.`;\n\n    return (\n      <div className={styles.main}>\n        <div className={styles.content}>\n          <QnA number=\"Q1\" split={false} question={Q1} answer={A1} />\n          <QnA number=\"Q2\" split={true} question={Q2} answer={A2} />\n          <QnA number=\"Q3\" split={false} question={Q3} answer={A3} />\n          <QnA number=\"Q4\" split={false} question={Q4} answer={A4} />\n          <QnA number=\"Q5\" split={false} question={Q5} answer={A5} />\n          <QnA number=\"Q6\" split={false} question={Q6} answer={A6} />\n          <QnA number=\"Q7\" split={false} question={Q7} answer={A7} />\n          <QnA number=\"Q8\" split={false} question={Q8} answer={A8} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FAQ;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport styles from \"./ExplanationBox.module.css\";\n\nclass ExplanationBox extends React.Component {\n  render() {\n    const style = this.props.nogap ? styles.containerNoGap : styles.container;\n\n    let explainerText = this.props.explain;\n    const split = this.props.split;\n\n    if (explainerText && split === true) {\n      const splitText = explainerText.split(\"\\n\").map((i) => {\n        return <p>{i}</p>;\n      });\n\n      explainerText = splitText;\n    }\n\n    return (\n      <div className={style}>\n        <div className={styles.header}>{this.props.header}</div>\n        <div className={styles.intro}>{this.props.intro}</div>\n        <div className={styles.explain}>{explainerText}</div>\n      </div>\n    );\n  }\n}\n\nExplanationBox.propTypes = {\n  explain: PropTypes.string,\n  header: PropTypes.string,\n  intro: PropTypes.string,\n};\n\nexport default ExplanationBox;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { LayerGroup, MapContainer, ImageOverlay, TileLayer, CircleMarker, Popup } from \"react-leaflet\";\n// import TextButton from \"../TextButton/TextButton\";\n// import \"./LeafletMapResponsive.css\";\n\nimport styles from \"./LeafletMap.module.css\";\n\nclass LeafletMap extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    this.props.siteSelector(e.target.options.data);\n  }\n\n  processSites() {\n    const metadata = this.props.metadata;\n\n    if (!metadata) {\n      return null;\n    }\n\n    let markers = [];\n\n    let seenSites = new Set();\n    //\n    for (const speciesData of Object.values(metadata)) {\n      for (const [network, networkData] of Object.entries(speciesData)) {\n        for (const [site, value] of Object.entries(networkData)) {\n          if (seenSites.has(site)) {\n            continue;\n          }\n\n          const latitude = value[\"latitude\"];\n          const longitude = value[\"longitude\"];\n\n          const locationStr = `${latitude}, ${longitude}`;\n          const location = [latitude, longitude];\n\n          const colourHex = this.props.colours[network][site];\n\n          const marker = (\n            <CircleMarker\n              key={locationStr}\n              center={location}\n              data={site}\n              eventHandlers={{\n                click: this.handleClick,\n              }}\n              fillColor={colourHex}\n              color={colourHex}\n              fill={true}\n              fillOpacity={1.0}\n              radius={10}\n            >\n              <Popup>\n                <div className={styles.marker}>\n                  <div className={styles.markerBody}>\n                    {value[\"long_name\"]}\n                    <br />\n                    <br />\n                    Height: {value[\"magl\"]}\n                    <br />\n                    <br />\n                    For more information please visit the network website - {`${network}`}\n                    {/* <TextButton\n                          styling=\"dark\"\n                          onClickParam={key}\n                          extraStyling={{ fontSize: \"1.0em\" }}\n                          onClick={this.props.siteInfoOverlay}\n                        >\n                          Read site information\n                        </TextButton> */}\n                  </div>\n                  <div className={styles.markerLocation}>Location: {locationStr}</div>\n                </div>\n              </Popup>\n            </CircleMarker>\n          );\n\n          markers.push(marker);\n          seenSites.add(site);\n        }\n      }\n    }\n\n    return markers;\n  }\n\n  render() {\n    let imgOverlay = null;\n    if (this.props.overlayImg && this.props.overlayBounds) {\n      const imgPath = this.props.overlayImg;\n      const bounds = this.props.overlayBounds;\n\n      imgOverlay = <ImageOverlay url={imgPath} bounds={bounds} opacity={0.7} zIndex={10} />;\n    }\n\n    let url = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n    let attribution = '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors';\n    if (this.props.mapstyle && this.props.mapstyle === \"proton\") {\n      url = \"https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png\";\n      const extraAttr = '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors';\n      const attrTiles = '&copy; <a href=\"http://osm.org/copyright\">Map tiles by Carto, under CC BY 3.0.</a> ';\n      attribution = extraAttr + attrTiles;\n    }\n\n    const markers = this.processSites();\n    const zoom = this.props.zoom ? this.props.zoom : 5;\n\n    const style = { width: \"90%\" };\n\n    return (\n      <div className={styles.container}>\n        <MapContainer center={this.props.centre} zoom={zoom} scrollWheelZoom={true} style={style} tap={false}>\n          <TileLayer attribution={attribution} url={url} />\n          <LayerGroup>{markers}</LayerGroup>\n          <LayerGroup>{imgOverlay}</LayerGroup>\n        </MapContainer>\n      </div>\n    );\n  }\n}\n\nLeafletMap.propTypes = {\n  centre: PropTypes.arrayOf(PropTypes.number).isRequired,\n  colours: PropTypes.object,\n  height: PropTypes.string,\n  mapstyle: PropTypes.string,\n  overlayBounds: PropTypes.arrayOf(PropTypes.array),\n  overlayImg: PropTypes.string,\n  setOverlay: PropTypes.func,\n  siteSelector: PropTypes.func,\n  sites: PropTypes.object,\n  width: PropTypes.string,\n  zoom: PropTypes.number.isRequired,\n};\n\nexport default LeafletMap;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nclass GraphContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    // Set the initial size of the plot\n    this.state = { width: 1600, height: 300 };\n    this.contRef = React.createRef();\n  }\n\n  updateDimensions() {\n    const node = this.contRef.current;\n    const dbcontent = document.getElementById(\"graphContent\");\n    const widthScale = this.props.widthScale ? this.props.widthScale : 1.0;\n    const heightScale = this.props.heightScale ? this.props.heightScale : 1.0;\n\n    if (node) {\n      const height = heightScale * node.parentNode.clientHeight;\n      const width = widthScale * dbcontent.clientWidth;\n      this.setState({ height: height, width: width });\n    }\n  }\n\n  componentDidMount() {\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  render() {\n    return (\n      <div ref={this.contRef}>\n        {React.cloneElement(this.props.children, {\n          height: this.state.height,\n          width: this.state.width,\n        })}\n      </div>\n    );\n  }\n}\n\nGraphContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default GraphContainer;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport styles from \"./MultiSiteLineChart.module.css\";\n\nclass MultiSiteLineChart extends React.Component {\n  render() {\n    let plotData = [];\n    let maxY = 0;\n    let minY = Infinity;\n\n    const data = this.props.data;\n    const selectedSpecies = this.props.selectedSpecies;\n\n    for (const [network, networkData] of Object.entries(data)) {\n      for (const [site, siteData] of Object.entries(networkData)) {\n        for (const sectorData of Object.values(siteData)) {\n          const metadata = this.props.siteMetadata[selectedSpecies][network][site];\n          const xValues = sectorData[\"x_values\"];\n          const yValues = sectorData[\"y_values\"];\n\n          const max = Math.max(...yValues);\n          const min = Math.min(...yValues);\n\n          if (max > maxY) {\n            maxY = max;\n          }\n\n          if (min < minY) {\n            minY = min;\n          }\n\n          // Set the name for the legend\n          let name = null;\n          try {\n            name = metadata[\"long_name\"];\n          } catch (error) {\n            console.error(`Error reading name for legend - ${error}`);\n          }\n\n          const colour = this.props.colours[network][site];\n          const units = this.props.units;\n\n          const trace = {\n            x: xValues,\n            y: yValues,\n            units: this.props.units,\n            mode: \"lines\",\n            line: {\n              width: 1,\n              color: colour,\n            },\n            name: name,\n            hovertemplate: `<b>Date</b>: %{x} <br><b>Concentration: </b>: %{y:.2f} ${units}<br>`,\n          };\n\n          plotData.push(trace);\n        }\n      }\n    }\n\n    let dateMarkObject = null;\n    const selectedDate = this.props.selectedDate;\n\n    if (selectedDate) {\n      const date = new Date(parseInt(selectedDate));\n\n      dateMarkObject = {\n        type: \"line\",\n        x0: date,\n        y0: minY,\n        x1: date,\n        y1: maxY,\n        line: {\n          color: \"black\",\n          width: 1,\n        },\n      };\n    }\n\n    const widthScaleFactor = 0.925;\n\n    const layout = {\n      title: {\n        text: this.props.title ? this.props.title : null,\n        font: {\n          size: 16,\n        },\n        xanchor: \"center\",\n        y: 0.97,\n        yanchor: \"top\",\n      },\n      xaxis: {\n        range: this.props.xRange ? this.props.xRange : null,\n        showgrid: false,\n        linecolor: \"black\",\n        autotick: true,\n        ticks: \"outside\",\n      },\n      yaxis: {\n        automargin: true,\n        title: {\n          text: this.props.yLabel,\n          standoff: 1,\n        },\n        range: this.props.yRange ? this.props.yRange : null,\n        showgrid: false,\n        linecolor: \"black\",\n        autotick: true,\n        ticks: \"outside\",\n        zeroline: false,\n      },\n      showlegend: true,\n      legend: {\n        x: 1,\n        xanchor: \"right\",\n        y: 1,\n      },\n      width: widthScaleFactor * this.props.width,\n      height: this.props.height,\n      margin: {\n        l: 60,\n        r: 40,\n        b: 30,\n        t: 20,\n        pad: 5,\n      },\n      shapes: [dateMarkObject],\n    };\n\n    return (\n      <div data-testid={\"linePlot\"} className={styles.container}>\n        <Plot data={plotData} layout={layout} />\n      </div>\n    );\n  }\n}\n\nMultiSiteLineChart.propTypes = {\n  data: PropTypes.object.isRequired,\n  selectedDate: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  title: PropTypes.string,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  xRange: PropTypes.string,\n  yLabel: PropTypes.string,\n  yRange: PropTypes.string,\n};\n\nexport default MultiSiteLineChart;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport styles from \"./RadioButtons.module.css\";\n\nclass RadioButtons extends React.Component {\n  constructor() {\n    super();\n\n    this.onChangeValue = this.onChangeValue.bind(this);\n  }\n\n  onChangeValue(event) {\n    this.props.onChange(event.target.value);\n  }\n\n  render() {\n    const options = this.props.options;\n\n    let buttons = [];\n    for (const option of Object.keys(options)) {\n      const checked = option === this.props.selected;\n\n      const optionUpper = option.toUpperCase();\n\n      let label = \"NA\";\n      if (optionUpper === \"CO2\") {\n        label = (\n          <b>\n            CO<sub>2</sub>\n          </b>\n        );\n      } else if (optionUpper === \"CH4\") {\n        label = (\n          <b>\n            CH<sub>4</sub>\n          </b>\n        );\n      } else {\n        label = <b>{optionUpper}</b>;\n      }\n\n      const button = (\n        <label key={option}>\n          {label}\n          <input type=\"radio\" value={option} checked={checked} onChange={this.handleChange} />\n        </label>\n      );\n\n      buttons.push(button);\n    }\n\n    return (\n      <div className={styles.buttons} onChange={this.onChangeValue}>\n        {buttons}\n      </div>\n    );\n  }\n}\n\nRadioButtons.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.object.isRequired,\n  selected: PropTypes.string.isRequired,\n};\n\nexport default RadioButtons;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport styles from \"./NiceButton.module.css\";\n\nclass NiceButton extends React.Component {\n  render() {\n    const style = styles.niceButton;\n    const extraStyling = this.props.extraStyling ? this.props.extraStyling : {};\n    const onClickParam = this.props.onClickParam;\n\n    return (\n      <button\n        type=\"button\"\n        data-onclickparam={onClickParam}\n        className={style}\n        style={extraStyling}\n        onClick={this.props.onClick}\n      >\n        {this.props.children}\n      </button>\n    );\n  }\n}\n\nNiceButton.propTypes = {\n  children: PropTypes.string.isRequired,\n  extraStyling: PropTypes.object,\n  onClick: PropTypes.func,\n  onClickParam: PropTypes.string,\n};\n\nexport default NiceButton;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport { set } from \"lodash\";\n\nimport GraphContainer from \"../GraphContainer/GraphContainer\";\nimport MultiSiteLineChart from \"../MultiSiteLineChart/MultiSiteLineChart\";\n\nimport { isEmpty, getVisID } from \"../../util/helpers\";\n\nimport styles from \"./ObsBox.module.css\";\nimport RadioButtons from \"../RadioButtons/RadioButtons\";\nimport NiceButton from \"../NiceButton/NiceButton\";\n\nclass ObsBox extends React.Component {\n  createEmissionsGraphs() {\n    const selectedKeys = this.props.selectedKeys;\n    const processedData = this.props.processedData;\n    const selectedSites = this.props.selectedSites;\n    const selectedSpecies = this.props.selectedSpecies;\n    const metadata = this.props.metadata;\n\n    const noSiteSelected = selectedSites.size === 0;\n\n    if (noSiteSelected) {\n      return <div className={styles.emptyMessage}>Please select a site</div>;\n    }\n\n    let speciesEmissions = {};\n    let multiUnits = [];\n\n    if (selectedKeys) {\n      const speciesData = selectedKeys[selectedSpecies];\n\n      for (const [network, networkData] of Object.entries(speciesData)) {\n        for (const [site, sectorData] of Object.entries(networkData)) {\n          for (const [sector, value] of Object.entries(sectorData)) {\n            if (value) {\n              //   if (!speciesEmissions.hasOwnProperty(site)) {\n              //     speciesEmissions[site] = {};\n              //   }\n\n              //   speciesEmissions[network][site][sector] = data;\n\n              const data = processedData[selectedSpecies][network][site][sector];\n              set(speciesEmissions, `${network}.${site}.${sector}`, data);\n\n              try {\n                multiUnits.push(metadata[selectedSpecies][network][site][\"units\"]);\n              } catch (error) {\n                console.log(`Error reading units - ${error}`);\n              }\n            }\n          }\n        }\n      }\n\n      if (!isEmpty(speciesEmissions)) {\n        // Do a quick check to make sure all the units are the same\n        let units = null;\n        if (new Set(multiUnits).size === 1) {\n          units = multiUnits[0];\n        } else {\n          console.error(`Multiple units for same species - ${multiUnits}`);\n        }\n\n        const key = Object.keys(speciesEmissions).join(\"-\");\n\n        const widthScale = 0.9;\n        const heightScale = 0.9;\n\n        // We only set the title of the graph if there's one site selected\n        let title = null;\n        // if (this.props.selectedSites.size === 1) {\n        //   let iter = this.props.selectedSites.values();\n        //   const siteName = iter.next().value;\n        //   title = metadata[selectedSpecies][network][siteName][\"long_name\"];\n        // }\n\n        const xLabel = \"Date\";\n        const yLabel = `Concentration  (${units})`;\n\n        const vis = (\n          <GraphContainer heightScale={heightScale} widthScale={widthScale} key={key}>\n            <MultiSiteLineChart\n              title={title}\n              divID={getVisID()}\n              data={speciesEmissions}\n              xLabel={xLabel}\n              yLabel={yLabel}\n              key={key}\n              colours={this.props.colours}\n              units={units}\n              siteMetadata={this.props.metadata}\n              selectedSpecies={this.props.selectedSpecies}\n            />\n          </GraphContainer>\n        );\n\n        return vis;\n      } else {\n        console.error(\"No data to plot.\");\n        return null;\n      }\n    }\n  }\n\n  render() {\n    const siteSelected = this.props.selectedSites.size > 0;\n\n    let clearButton = null;\n    if (siteSelected) {\n      clearButton = <NiceButton onClick={this.props.clearSelectedSites}>Clear</NiceButton>;\n    }\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.select}>\n          <RadioButtons\n            onChange={this.props.speciesSelector}\n            options={this.props.selectedKeys}\n            selected={this.props.selectedSpecies}\n          />\n          <div className={styles.clearButton}>{clearButton}</div>\n        </div>\n        <div className={styles.plot}>{this.createEmissionsGraphs()}</div>\n      </div>\n    );\n  }\n}\n\nObsBox.propTypes = {\n  bodyText: PropTypes.string,\n  dataSelector: PropTypes.func,\n  defaultSpecies: PropTypes.string,\n  headerText: PropTypes.string,\n  processedData: PropTypes.object,\n  selectedKeys: PropTypes.object,\n  selectedSites: PropTypes.object,\n  selectedSpecies: PropTypes.string,\n  speciesSelector: PropTypes.func,\n  clearSelectedSites: PropTypes.func,\n  colours: PropTypes.object.isRequired,\n};\n\nexport default ObsBox;\n","import { nanoid } from \"nanoid\";\n\nexport function getVisID() {\n  // Create a unique ID for each visualisation\n  return \"vis-id-\" + nanoid();\n}\n\nexport function isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\n\n// export function importSVGs() {\n//   let footprints = {};\n//   try {\n//     const requiredSVGs = require.context(\"../images/londonFootprints/TMB\", false, /\\.svg$/);\n//     const paths = requiredSVGs.keys();\n\n//     // This is quite a bit of work but it means we can have human-readable filenames\n//     // and pass a list of UNIX timestamps to the SliderMap component\n//     for (const path of paths) {\n//       // Here we need to read the filename and convert it to a UNIX timestamp\n//       const filename = String(path).split(\"_\")[1];\n//       const timestampStr = String(filename).split(\".\")[0];\n\n//       const timestamp = new Date(timestampStr).getTime();\n\n//       footprints[timestamp] = requiredSVGs(path)[\"default\"];\n//     }\n//   } catch (error) {\n//     console.error(\"Could not import images. We expect image filenames of the form siteName-2021-01-01T00:00:00.svg\");\n//   }\n\n//   return footprints;\n// }\n\n// export function importMockEmissions() {\n//   let emissions = {};\n//   try {\n//     const requiredPNGs = require.context(\"../images/mockEmissions\", false, /\\.png$/);\n//     const paths = requiredPNGs.keys();\n\n//     // This is quite a bit of work but it means we can have human-readable filenames\n//     // and pass a list of UNIX timestamps to the SliderMap component\n//     for (const path of paths) {\n//       // Here we need to read the filename and convert it to a UNIX timestamp\n//       const filename = String(path).split(\"./\")[1];\n//       const timestampStr = String(filename).split(\".\")[0];\n//       const timestamp = parseInt(timestampStr);\n\n//       emissions[timestamp] = requiredPNGs(path)[\"default\"];\n//     }\n//   } catch (error) {\n//     console.error(\"Could not import images. We expect image filenames of the form 1610323200000.png\");\n//   }\n\n//   return emissions;\n// }\n\nexport function importSiteImages() {\n  // For all three types /\\.(png|jpe?g|svg)$/\n  let siteInfo = {};\n\n  try {\n    const requiredJPGs = require.context(\"../images/siteImages\", false, /\\.jpe?g$/);\n    const paths = requiredJPGs.keys();\n\n    if (paths.length === 0) {\n      throw new Error(\"No image files found\");\n    }\n\n    for (const path of paths) {\n      // Here we need to read the filename and convert it to a UNIX timestamp\n      const filename = String(path).split(\"./\")[1];\n      const sansExtension = String(filename).split(\".\")[0].toUpperCase();\n\n      if (sansExtension.length > 3) {\n          console.log(\"We expect filenames to be three letter site codes\");\n          continue;\n      }\n\n      siteInfo[sansExtension] = requiredJPGs(path)[\"default\"];\n    }\n  } catch (error) {\n    console.error(`Could not import site images - ${error}`);\n  }\n  return siteInfo;\n}\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport styles from \"./ObsExplainer.module.css\";\n\nclass ObsExplainer extends React.Component {\n  render() {\n    const style = this.props.nogap ? styles.containerNoGap : styles.container;\n\n    return (\n      <div className={style}>\n        <div className={styles.header}>Observations</div>\n        <div className={styles.explain}>\n          <li>Greenhouse gas concentrations are monitored from a network of sites across the city.</li>\n          <li>Measurements are made of carbon dioxide and methane, the most important greenhouse gases.</li>\n          <li>\n            Scientists are using these observations to learn more about the UK's methane emissions. \n          </li>\n          \n\n          <li>\n            Measurements are made by the&nbsp;\n            <a\n              href=\"https://www.bristol.ac.uk/chemistry/research/acrg/current/decc.html\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              UK DECC network\n            </a>\n            ,&nbsp;\n            <a href=\"https://www.bristol.ac.uk/chemistry/research/acrg/\" target=\"_blank\" rel=\"noopener noreferrer\">\n              University of Bristol\n            </a>\n            ,&nbsp;\n            <a href=\"https://www.npl.co.uk/emissions-atmospheric-metrology\" target=\"_blank\" rel=\"noopener noreferrer\">\n              National Physical Laboratory\n            </a>\n            ,&nbsp;\n            <a href=\"http://beacon.berkeley.edu/about/\" target=\"_blank\" rel=\"noopener noreferrer\">\n              BEACO2N\n            </a>\n            ,&nbsp;\n            <a\n              href=\"https://www.royalholloway.ac.uk/research-and-teaching/departments-and-schools/earth-sciences/research/research-laboratories/greenhouse-gas-laboratory/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Royal Holloway University of London\n            </a>\n            &nbsp;and&nbsp;\n            <a\n              href=\"https://www.strath.ac.uk/workwithus/globalenvironmentalmeasurementmonitoring/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              University of Strathclyde.\n            </a>\n          </li>\n          <li>\n          Start exploring the measurements by selecting a site from the map\n          </li>\n        </div>\n      </div>\n    );\n  }\n}\n\nObsExplainer.propTypes = {\n  explain: PropTypes.string,\n  header: PropTypes.string,\n  intro: PropTypes.string,\n};\n\nexport default ObsExplainer;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport ExplanationBox from \"../ExplanationBox/ExplanationBox\";\nimport LeafletMap from \"../LeafletMap/LeafletMap\";\n\nimport styles from \"../../Dashboard.module.css\";\nimport ObsBox from \"../ObsBox/ObsBox\";\nimport ObsExplainer from \"../ObsExplainer/ObsExplainer\";\n\nclass LiveData extends React.Component {\n  createMapExplainer() {\n    const header = \"Observations\";\n    const explainer = `• Greenhouse gas concentrations are monitored from a network of sites across the city.\\n\n    • Measurements are made of carbon dioxide and methane, the most important greenhouse gases.\\n\n    • Scientists are using these observations to learn more about the UK's methane emissions.\\n\n    Start exploring the measurements by selecting a site from the map`;\n    return <ExplanationBox header={header} explain={explainer} split={true} />;\n  }\n\n  createIntro() {\n    const explanation = `Welcome to the COP 26 greenhouse gas data dashboard, where you can view atmospheric greenhouse gas measurements made in Glasgow before and during the COP 26 event.`;\n    return <ExplanationBox nogap={true} explain={explanation} />;\n  }\n\n  createObsBox() {\n    return (\n      <ObsBox\n        dataSelector={this.props.dataSelector}\n        clearSelectedSites={this.props.clearSites}\n        speciesSelector={this.props.speciesSelector}\n        selectedKeys={this.props.selectedKeys}\n        processedData={this.props.processedData}\n        selectedSites={this.props.selectedSites}\n        selectedSpecies={this.props.selectedSpecies}\n        defaultSpecies={this.props.defaultSpecies}\n        colours={this.props.colours}\n        metadata={this.props.metadata}\n        // sites={this.props.sites}\n      />\n    );\n  }\n\n  render() {\n    // Map centre lat/long\n    const mapCentre = [55.861, -4.248];\n\n    return (\n      <div className={styles.content}>\n        <div className={styles.intro}>{this.createIntro()}</div>\n        <div className={styles.timeseries} id=\"graphContent\">\n          {this.createObsBox()}\n        </div>\n        <div className={styles.mapExplainer}>\n          <ObsExplainer />\n        </div>\n        <div className={styles.siteMap}>\n          <LeafletMap\n            siteSelector={this.props.siteSelector}\n            metadata={this.props.metadata}\n            centre={mapCentre}\n            zoom={10}\n            colours={this.props.colours}\n            siteData={this.props.siteData}\n            siteInfoOverlay={this.props.setSiteOverlay}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nLiveData.propTypes = {\n  clearSites: PropTypes.func,\n  colours: PropTypes.object,\n  dataSelector: PropTypes.func,\n  defaultSpecies: PropTypes.string,\n  processedData: PropTypes.object,\n  selectedKeys: PropTypes.object,\n  selectedSites: PropTypes.object,\n  selectedSpecies: PropTypes.string,\n  setSiteOverlay: PropTypes.func,\n  siteData: PropTypes.object,\n  siteSelector: PropTypes.func,\n  sites: PropTypes.object,\n  speciesSelector: PropTypes.func,\n};\n\nexport default LiveData;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport styles from \"./EstimatesExplainer.module.css\";\n\nclass EstimatesExplainer extends React.Component {\n  render() {\n    const style = this.props.nogap ? styles.containerNoGap : styles.container;\n\n    return (\n      <div className={style}>\n        <div className={styles.header}>Case study: UK methane emissions</div>\n        <div className={styles.intro}>\n          One way this has been used is to improve UK national methane estimates – by adjusting emissions to better\n          match to the atmospheric data from the{\" \"}\n          <a\n            href=\"https://www.bristol.ac.uk/chemistry/research/acrg/current/decc.html\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            UK DECC network\n          </a>\n          , we can help to evaluate the inventory.\n        </div>\n        <div className={styles.explain}>\n          This study suggested that methane emissions from the inventory were consistent with atmospheric data in recent\n          years. However, in the 1990s and early 2000s, the two methods disagreed. This information is now allowing the\n          inventory teams to examine assumptions in the earlier record, and, hopefully, improve our understand of the\n          UK's methane emissions.\n        </div>\n      </div>\n    );\n  }\n}\n\nEstimatesExplainer.propTypes = {\n  explain: PropTypes.string,\n  header: PropTypes.string,\n  intro: PropTypes.string,\n};\n\nexport default EstimatesExplainer;\n","export default __webpack_public_path__ + \"static/media/ch4_ukghg_map_combustion_20170101T00.1ab6e12d.png\";","export default __webpack_public_path__ + \"static/media/ch4_ukghg_map_production_20170101T00.831ef05b.png\";","export default __webpack_public_path__ + \"static/media/ch4_ukghg_map_waste_20170101T00.a311b231.png\";","export default __webpack_public_path__ + \"static/media/ch4_ukghg_map_sectors_stacked_20170101T00.e357e3b3.png\";","export default __webpack_public_path__ + \"static/media/co2_ukghg_map_natural_20170101T00.8615fcfb.png\";","export default __webpack_public_path__ + \"static/media/co2_ukghg_map_combustion_20170101T00.8858d827.png\";","export default __webpack_public_path__ + \"static/media/co2_ukghg_map_production_20170101T00.6650e571.png\";","export default __webpack_public_path__ + \"static/media/co2_ukghg_map_sectors_stacked_20170101T00.de4fabc3.png\";","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport TextButton from \"../TextButton/TextButton\";\nimport LeafletMap from \"../LeafletMap/LeafletMap\";\n\nimport styles from \"./EmissionsBox.module.css\";\n\nimport comb_ch4 from \"../../images/emissionsPNGs/ch4/uk_raw/ch4_ukghg_map_combustion_20170101T00.png\";\nimport prod_ch4 from \"../../images/emissionsPNGs/ch4/uk_raw/ch4_ukghg_map_production_20170101T00.png\";\nimport waste_ch4 from \"../../images/emissionsPNGs/ch4/uk_raw/ch4_ukghg_map_waste_20170101T00.png\";\nimport stacked_ch4 from \"../../images/emissionsPNGs/ch4/uk_raw/ch4_ukghg_map_sectors_stacked_20170101T00.png\";\n\nimport natural_co2 from \"../../images/emissionsPNGs/co2/uk_raw/co2_ukghg_map_natural_20170101T00.png\";\nimport comb_co2 from \"../../images/emissionsPNGs/co2/uk_raw/co2_ukghg_map_combustion_20170101T00.png\";\nimport production_co2 from \"../../images/emissionsPNGs/co2/uk_raw/co2_ukghg_map_production_20170101T00.png\";\nimport stacked_co2 from \"../../images/emissionsPNGs/co2/uk_raw/co2_ukghg_map_sectors_stacked_20170101T00.png\";\n\nclass EmissionsBox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const images = {\n      CH4: {\n        Combustion: comb_ch4,\n        Production: prod_ch4,\n        Total: stacked_ch4,\n        Waste: waste_ch4,\n        colorbars: {\n          Combustion: null,\n          Production: null,\n          Total: null,\n          Waste: null,\n        },\n      },\n      CO2: {\n        Natural: natural_co2,\n        Combustion: comb_co2,\n        Total: stacked_co2,\n        Production: production_co2,\n        colorbars: {\n          Natural: null,\n          Combustion: null,\n          Total: null,\n          Production: null,\n        },\n      },\n    };\n\n    this.setImage = this.setImage.bind(this);\n    this.setSpecies = this.setSpecies.bind(this);\n    this.state = { images: images, selectedSector: \"Total\", selectedSpecies: \"CO2\" };\n  }\n\n  setImage(e) {\n    const name = e.target.dataset.onclickparam;\n    const species = this.state.selectedSpecies;\n    if (!this.state.images[species].hasOwnProperty(name)) {\n      console.error(`$(name) not in images`);\n      return;\n    }\n\n    this.setState({ selectedSector: name });\n  }\n\n  setSpecies(e) {\n    // TODO - check this, using innerText could be fragile.\n    const species = e.target.innerText; //.dataset.onclickparam;\n    if (!this.state.images.hasOwnProperty(species)) {\n      console.error(`$(name) not in images`);\n      return;\n    }\n\n    this.setState({ selectedSpecies: species, selectedSector: \"Total\" });\n  }\n\n  render() {\n    const selectedSector = this.state.selectedSector;\n    const selectedSpecies = this.state.selectedSpecies;\n\n    const selectedImages = this.state.images[selectedSpecies];\n\n    let sectorButtons = [];\n    const extraStyling = { fontSize: \"1.5em\" };\n\n    for (const key of Object.keys(selectedImages).sort()) {\n      if (key === \"colorbars\") continue;\n\n      let styling = \"dark\";\n      if (key === selectedSector) {\n        styling = \"selected\";\n      }\n\n      const button = (\n        <TextButton key={key} onClickParam={key} extraStyling={extraStyling} styling={styling} onClick={this.setImage}>\n          {key}\n        </TextButton>\n      );\n\n      sectorButtons.push(button);\n    }\n\n    let speciesButtons = [];\n    for (const key of Object.keys(this.state.images)) {\n      let styling = \"dark\";\n      if (key === selectedSpecies) {\n        styling = \"speciesSelected\";\n      }\n\n      let label = \"NA\";\n      if (key === \"CO2\") {\n        label = (\n          <text onClickParam={key}>\n            CO<sub>2</sub>\n          </text>\n        );\n      } else if (key === \"CH4\") {\n        label = (\n          <text onClickParam={key}>\n            CH<sub>4</sub>\n          </text>\n        );\n      } else {\n        console.error(\"Invalid species.\");\n      }\n\n      const button = (\n        <TextButton\n          key={key}\n          styling={styling}\n          onClickParam={key}\n          extraStyling={extraStyling}\n          onClick={this.setSpecies}\n        >\n          {label}\n        </TextButton>\n      );\n\n      speciesButtons.push(button);\n    }\n\n    const emissionsImage = this.state.images[this.state.selectedSpecies][this.state.selectedSector];\n\n    // TODO - get the correct bounds for the box\n    const overlayBounds = [\n      [49.2109147409668, -10.562146891479602],\n      [61.908634740966804, 4.908553108520451],\n    ];\n\n    const midpointLat = overlayBounds[0][0] + (overlayBounds[1][0] - overlayBounds[0][0]) / 2\n    const midpointLon = overlayBounds[0][1] + (overlayBounds[1][1] - overlayBounds[0][1]) / 2\n    const overlayMidpoint = [midpointLat, midpointLon]\n\n    const emissionsText = `Emissions from the National Atmospheric Emissions Inventory (NAEI).`;\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.body}>{emissionsText}</div>\n        <div className={styles.plot}>\n          <LeafletMap centre={overlayMidpoint} zoom={5} overlayBounds={overlayBounds} overlayImg={emissionsImage} />\n        </div>\n        <div className={styles.buttons}>\n          <div className={styles.speciesButtons}>{speciesButtons}</div>\n          <div className={styles.sectorButtons}>{sectorButtons}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nEmissionsBox.propTypes = {\n  altText: PropTypes.string,\n  bodyText: PropTypes.string,\n  headerText: PropTypes.string,\n  imagePath: PropTypes.string,\n  selectedDate: PropTypes.number,\n};\n\nexport default EmissionsBox;\n","export default __webpack_public_path__ + \"static/media/inversion_demo_UK_optim.5babee29.gif\";","export default __webpack_public_path__ + \"static/media/methane_BEIS_2019.ad61d719.png\";","export default __webpack_public_path__ + \"static/media/emissions_measurements_image.b8562de1.png\";","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport ExplanationBox from \"../ExplanationBox/ExplanationBox\";\nimport EstimatesExplainer from \"../EstimatesExplainer/EstimatesExplainer\";\nimport EmissionsBox from \"../EmissionsBox/EmissionsBox\";\n\nimport styles from \"../../Dashboard.module.css\";\n\nimport inversionDemo from \"../../images/modelVideos/inversion_demo_UK_optim.gif\";\nimport inventoryComparison from \"../../images/methane_BEIS_2019.png\";\n\n// Model demonstration image\nimport gasDispersionImage from \"../../images/modelImage/emissions_measurements_image.png\";\n\nclass Explainer extends React.Component {\n  createEmissionsBox() {\n    const emissionsHeader = \"Emissions\";\n    const emissionsText = `Emissions from the National Atmospheric Emissions Inventory (NAEI).`;\n    return (\n      <EmissionsBox\n        altText={\"Example emissions\"}\n        headerText={emissionsHeader}\n        bodyText={emissionsText}\n      />\n    );\n  }\n\n  createEmissionsExplainer() {\n    const header = \"Emissions\";\n    const intro = `On the live dashboard page we showed the amount of carbon dioxide and methane we measure in the atmosphere. We make these measurements in order to infer emissions.`;\n    const body = `There are two primary methods for estimating greenhouse gas emissions:\n            a) Inventory methods, in which emissions are estimated using socioeconomic data (e.g., the amount of fuel sold and used in the UK). A map showing the location of the UK's carbon dioxide and methane emissions, according to the inventory, is shown here.\\n\n            b) Atmospheric data-based methods, in which concentration data and atmospheric models are compared to determine whether the inventory may need to be adjusted.`;\n    return <ExplanationBox nogap={true} header={header} intro={intro} explain={body} />;\n  }\n\n  createComparisonExplainer() {\n    const header = \"Comparing model with observations\";\n    const body = `We can compare the inventory emissions to the atmospheric measurements to see how well they compare. \n    From this initial “best guess”, we can run simulations where, by making small changes to the possible emissions, \n    we can continually improve to better match the measurements made at each site.`;\n    return <ExplanationBox header={header} intro={body} />;\n  }\n\n  createModelExplainer() {\n    const header = \"Simulating travel of greenhouse gases\";\n    const body = `When greenhouse gases are emitted, where they travel is dependant\n    on many different factors including wind direction, speed and turbulence. \n    When we measure greenhouse gases in the atmosphere, if we want to start to understand\n    where they came from, first we need to use a model that can simulate this.\n    Once we have done this we can then compare inventories, as described above, to atmospheric\n    observations and see how well our predictions match reality.`;\n    // In order to compare inventories to atmospheric observations, we need to use a model that can simulate how greenhouse gases are dispersed in the atmosphere.\n    // Here, we show a simulation in which XXXXXX.`;\n    return <ExplanationBox header={header} intro={body} />;\n  }\n\n  render() {\n    return (\n      <div className={styles.explainerContent}>\n        <div className={styles.emissionsMap}>{this.createEmissionsBox()}</div>\n        <div className={styles.emissionsExplainer}>{this.createEmissionsExplainer()}</div>\n        <div className={styles.dispersionExplainer}>{this.createModelExplainer()}</div>\n        <div className={styles.dispersionImage}>\n          <img src={gasDispersionImage} alt=\"How source gases disperse in the atmopshere\" />\n        </div>\n        <div className={styles.comparisonExplainer}>{this.createComparisonExplainer()}</div>\n        <div className={styles.modelImprovement}>\n          <img src={inversionDemo} alt=\"Improvement of model estimates\" />\n        </div>\n        <div className={styles.estimatesExplainer}>\n          <EstimatesExplainer />\n        </div>\n        <div className={styles.estimatesImage}>\n          <img src={inventoryComparison} alt=\"Inventory improvement\" />\n          <div className={styles.linkType}>\n            O'Doherty et al. 2019, &nbsp;\n            <a\n              href=\"https://www.gov.uk/government/publications/uk-greenhouse-gas-emissions-monitoring-and-verification\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Annual report on long-term atmospheric measurement and interpretation\n            </a>\n            , BEIS, 2019\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nExplainer.propTypes = {\n  explain: PropTypes.string,\n  header: PropTypes.string,\n  intro: PropTypes.string,\n};\n\nexport default Explainer;\n","import React from \"react\";\nimport { Switch, Route, Link, HashRouter } from \"react-router-dom\";\n// import { schemeTableau10, schemeSet3, schemeDark2, schemeAccent } from \"d3-scale-chromatic\";\nimport { cloneDeep, set } from \"lodash\";\n\nimport ControlPanel from \"./components/ControlPanel/ControlPanel\";\nimport OverlayContainer from \"./components/OverlayContainer/OverlayContainer\";\n\nimport TextButton from \"./components/TextButton/TextButton\";\nimport Overlay from \"./components/Overlay/Overlay\";\nimport FAQ from \"./components/FAQ/FAQ\";\nimport LiveData from \"./components/LiveData/LiveData\";\nimport Explainer from \"./components/Explainer/Explainer\";\n\nimport { importSiteImages } from \"./util/helpers\";\nimport styles from \"./Dashboard.module.css\";\n\n// Timeseries data\nimport measurementData from \"./data/measurementData.json\";\n// Site description information\nimport siteInfoJSON from \"./data/siteInfo.json\";\n// import { scaleOrdinal } from \"d3-scale\";\nimport chroma from \"chroma-js\";\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      showSidebar: false,\n      selectedDate: 0,\n      processedData: {},\n      dataKeys: {},\n      selectedKeys: {},\n      footprintView: true,\n      emptySelection: true,\n      overlayOpen: false,\n      overlay: null,\n      plotType: \"footprint\",\n      layoutMode: \"dashboard\",\n      colours: {},\n    };\n\n    // By default we'll just pick a species from a single site to show\n    // const defaultSpecies = Object.keys(measurementData).sort()[0];\n    const defaultNetwork = Object.keys(measurementData)[0];\n    const defaultSpecies = Object.keys(measurementData[defaultNetwork]).sort()[0];\n    const defaultSite = Object.keys(measurementData[defaultNetwork][defaultSpecies]).sort()[0];\n\n    this.state.defaultSpecies = defaultSpecies;\n    this.state.defaultSite = defaultSite;\n    this.state.selectedSites = new Set([defaultSite]);\n    this.state.selectedSpecies = defaultSpecies;\n\n    // Build the site info for the overlays\n    this.buildSiteInfo();\n\n    // Select the data\n    this.dataSelector = this.dataSelector.bind(this);\n    // Selects the dates\n    this.siteSelector = this.siteSelector.bind(this);\n    this.toggleOverlay = this.toggleOverlay.bind(this);\n    this.setOverlay = this.setOverlay.bind(this);\n    this.speciesSelector = this.speciesSelector.bind(this);\n    this.clearSites = this.clearSites.bind(this);\n    this.toggleSidebar = this.toggleSidebar.bind(this);\n    this.setSiteOverlay = this.setSiteOverlay.bind(this);\n  }\n\n  buildSiteInfo() {\n    const siteImages = importSiteImages();\n\n    let siteData = {};\n    for (const site of Object.keys(siteInfoJSON)) {\n      try {\n        siteData[site] = {};\n        siteData[site][\"image\"] = siteImages[site];\n        siteData[site][\"description\"] = siteInfoJSON[site][\"description\"];\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    // Disabled the no direct mutation rule here as this only gets called from the constructor\n    /* eslint-disable react/no-direct-mutation-state */\n    this.state.siteInfo = siteData;\n    /* eslint-enable react/no-direct-mutation-state */\n  }\n\n  siteSelector(selectedSite) {\n    const siteLower = String(selectedSite).toLowerCase();\n\n    // Here we change all the sites and select all species / sectors at that site\n    let selectedSites = cloneDeep(this.state.selectedSites);\n\n    if (selectedSites.has(siteLower)) {\n      selectedSites.delete(siteLower);\n    } else {\n      selectedSites.add(siteLower);\n    }\n\n    // Now update the selectedKeys so each selected site has all its\n    // keys set to true\n    let selectedKeys = cloneDeep(this.state.selectedKeys);\n\n    for (const [species, speciesData] of Object.entries(selectedKeys)) {\n      for (const [network, networkData] of Object.entries(speciesData)) {\n        for (const [site, sectorData] of Object.entries(networkData)) {\n          const value = selectedSites.has(site);\n          for (const dataVar of Object.keys(sectorData)) {\n            selectedKeys[species][network][site][dataVar] = value;\n          }\n        }\n      }\n    }\n\n    this.setState({ selectedKeys: selectedKeys, selectedSites: selectedSites });\n  }\n\n  clearSites() {\n    this.setState({ selectedSites: new Set() });\n  }\n\n  speciesSelector(species) {\n    const speciesLower = species.toLowerCase();\n    this.setState({ selectedSpecies: speciesLower });\n  }\n\n  toggleOverlay() {\n    this.setState({ overlayOpen: !this.state.overlayOpen });\n  }\n\n  setOverlay(overlay) {\n    this.setState({ overlayOpen: true, overlay: overlay });\n  }\n\n  toggleSidebar() {\n    this.setState({ showSidebar: !this.state.showSidebar });\n  }\n\n  processData(rawData) {\n    // Process the data and create the correct Javascript time objects\n    // expected by plotly\n    let dataKeys = {};\n    let processedData = {};\n    let metadata = {};\n\n    let iter = this.state.selectedSites.values();\n    const defaultSite = iter.next().value;\n\n    let uniqueSites = {};\n\n    try {\n      for (const [network, networkData] of Object.entries(rawData)) {\n        uniqueSites[network] = {};\n        for (const [species, speciesData] of Object.entries(networkData)) {\n          for (const [site, gasData] of Object.entries(speciesData)) {\n            uniqueSites[network][site] = null;\n            // We want all values from this site to be true\n            const defaultValue = site === defaultSite;\n\n            for (const [dataVar, data] of Object.entries(gasData)) {\n              // Save metadata separately\n              if (dataVar === \"data\") {\n                // This feels a bit complicated but means we can bring in\n                // error data at a later stage\n                const speciesLower = species.toLowerCase();\n\n                // Here use lodash set to create the nested structure\n                set(dataKeys, `${species}.${network}.${site}.${speciesLower}`, defaultValue);\n\n                // We need to use speciesLower here as we've exported the variables\n                // from a pandas Dataframe and may want errors etc in the future\n                const timeseriesData = data[speciesLower];\n                const x_timestamps = Object.keys(timeseriesData);\n                const x_values = x_timestamps.map((d) => new Date(parseInt(d)));\n                // Measurement values\n                const y_values = Object.values(timeseriesData);\n\n                const graphData = {\n                  x_values: x_values,\n                  y_values: y_values,\n                };\n\n                set(processedData, `${species}.${network}.${site}.${speciesLower}`, graphData);\n              } else if (dataVar === \"metadata\") {\n                set(metadata, `${species}.${network}.${site}`, data);\n              }\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error reading data: \", error);\n    }\n\n    // Only expecting three networks so use these for now\n    // const colourMaps = [schemeTableau10, schemeSet3, schemeDark2];\n    // const cool_greens = chroma.scale([\"#fafa6e\", \"#2A4858\"]).mode(\"lch\").colors(12);\n    // const blue_purple = chroma.scale([\"#ffbb44\", \"#902ac7\"]).mode(\"lch\").colors(12);\n\n    // Colour tuples for use with Chroma\n    const colour_start_end = [\n      //   [\"#fafa6e\", \"#2A4858\"],\n      //   [\"#264653\", \"#e76f51\"],\n      [\"#f94144\", \"#577590\"],\n      [\"#d9ed92\", \"#184e77\"],\n    ];\n\n    // https://coolors.co/264653-2a9d8f-e9c46a-f4a261-e76f51\n    // https://coolors.co/f94144-f3722c-f8961e-f9c74f-90be6d-43aa8b-577590\n    // https://coolors.co/f94144-f3722c-f8961e-f9844a-f9c74f-90be6d-43aa8b-4d908e-577590-277da1\n    // [\"d9ed92\",\"b5e48c\",\"99d98c\",\"76c893\",\"52b69a\",\"34a0a4\",\"168aad\",\"1a759f\",\"1e6091\",\"184e77\"]\n\n    // Assign some colours for the sites\n    let siteIndex = 0;\n    let networkIndex = 0;\n    let siteColours = {};\n\n    for (const [network, localSiteData] of Object.entries(uniqueSites)) {\n      const nSites = Object.keys(localSiteData).length;\n      const start_end = colour_start_end[networkIndex];\n      const colorMap = chroma.scale(start_end).mode(\"lch\").colors(nSites);\n      for (const site of Object.keys(localSiteData)) {\n        const colourCode = colorMap[siteIndex];\n        set(siteColours, `${network}.${site}`, colourCode);\n        siteIndex++;\n      }\n      networkIndex++;\n      siteIndex = 0;\n    }\n\n    // Disabled the no direct mutation rule here as this only gets called from the constructor\n    /* eslint-disable react/no-direct-mutation-state */\n    // Give each site a colour\n    this.state.colours = siteColours;\n    this.state.processedData = processedData;\n    this.state.selectedKeys = dataKeys;\n    this.state.metadata = metadata;\n    this.state.isLoaded = true;\n    /* eslint-enable react/no-direct-mutation-state */\n  }\n\n  dataSelector(dataKeys) {\n    this.setState({ selectedKeys: dataKeys });\n  }\n\n  componentDidMount() {\n    const apiURL = \"https://raw.githubusercontent.com/openghg/dashboard_data/main/combined_data.json\";\n    fetch(apiURL)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.processData(result);\n          this.setState({\n            isLoaded: true,\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error,\n          });\n        }\n      );\n\n  }\n\n  anySelected() {\n    for (const subdict of Object.values(this.state.selectedKeys)) {\n      for (const value of Object.values(subdict)) {\n        if (value === true) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  setSiteOverlay(e) {\n    const siteCode = String(e.target.dataset.onclickparam).toUpperCase();\n    const siteInfo = this.state.siteInfo[siteCode];\n\n    const siteText = siteInfo[\"description\"];\n    const image = siteInfo[\"image\"];\n    const alt = `Image of ${siteCode}`;\n\n    const overlay = (\n      <Overlay header={siteCode} text={siteText} alt={alt} image={image} toggleOverlay={this.toggleOverlay} />\n    );\n\n    this.toggleOverlay();\n    this.setOverlay(overlay);\n  }\n\n  render() {\n    let { error, isLoaded } = this.state;\n\n    let overlay = null;\n    if (this.state.overlayOpen) {\n      overlay = <OverlayContainer toggleOverlay={this.toggleOverlay}>{this.state.overlay}</OverlayContainer>;\n    }\n\n    let extraSidebarStyle = {};\n    if (this.state.showSidebar) {\n      extraSidebarStyle = { transform: \"translateX(0px)\" };\n    }\n\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Retrieving data...</div>;\n    } else {\n      return (\n        <HashRouter>\n          <div className={styles.gridContainer}>\n            <div className={styles.header}>\n              <div className={styles.menuIcon}>\n                <TextButton styling=\"light\" extraStyling={{ fontSize: \"1.6em\" }} onClick={this.toggleSidebar}>\n                  &#9776;\n                </TextButton>\n              </div>\n            </div>\n            <aside className={styles.sidebar} style={extraSidebarStyle}>\n              <ControlPanel\n                layoutMode={this.state.layoutMode}\n                setOverlay={this.setOverlay}\n                toggleOverlay={this.toggleOverlay}\n                closePanel={this.toggleSidebar}\n              >\n                <Link to=\"/\" className={styles.navLink}>\n                  Live Data\n                </Link>\n                <Link to=\"/explainer\" className={styles.navLink}>\n                  Explainer\n                </Link>\n                <Link to=\"/FAQ\" className={styles.navLink}>\n                  FAQ\n                </Link>\n              </ControlPanel>\n            </aside>\n            <Switch>\n              <Route path=\"/explainer\">\n                <Explainer speciesSelector={this.speciesSelector} />\n              </Route>\n              <Route path=\"/FAQ\">\n                <FAQ />\n              </Route>\n              <Route path=\"/\">\n                <LiveData\n                  dataSelector={this.dataSelector}\n                  clearSites={this.clearSites}\n                  speciesSelector={this.speciesSelector}\n                  siteSelector={this.siteSelector}\n                  selectedKeys={this.state.selectedKeys}\n                  processedData={this.state.processedData}\n                  selectedSites={this.state.selectedSites}\n                  selectedSpecies={this.state.selectedSpecies}\n                  defaultSpecies={this.state.defaultSpecies}\n                  colours={this.state.colours}\n                  setSiteOverlay={this.state.setSiteOverlay}\n                  //   sites={this.state.sites}\n                  metadata={this.state.metadata}\n                />\n              </Route>\n            </Switch>\n            {overlay}\n          </div>\n        </HashRouter>\n      );\n    }\n  }\n}\n\nexport default Dashboard;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Dashboard from './Dashboard';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dashboard />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}